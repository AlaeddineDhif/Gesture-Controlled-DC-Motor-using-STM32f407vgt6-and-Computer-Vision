
test_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08004c78  08004c78  00005c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e94  08004e94  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e94  08004e94  00005e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e9c  08004e9c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e9c  08004e9c  00005e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ea4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000002a0  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf79  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c90  00000000  00000000  00013005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  00014c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ae  00000000  00000000  000158f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022352  00000000  00000000  0001629e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e84d  00000000  00000000  000385f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7a80  00000000  00000000  00046e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011e8bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c80  00000000  00000000  0011e900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00122580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c60 	.word	0x08004c60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004c60 	.word	0x08004c60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
static void MX_TIM1_Init(void);
static void MX_USART2_UART_Init(void);
void UART_Send_Debug(const char *format, ...);

/* Main Program --------------------------------------------------------------*/
int main(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
    HAL_Init();
 8000596:	f000 fc1f 	bl	8000dd8 <HAL_Init>
    SystemClock_Config();
 800059a:	f000 f92f 	bl	80007fc <SystemClock_Config>
    MX_GPIO_Init();
 800059e:	f000 fa45 	bl	8000a2c <MX_GPIO_Init>
    MX_TIM1_Init();
 80005a2:	f000 f995 	bl	80008d0 <MX_TIM1_Init>
    MX_USART2_UART_Init();
 80005a6:	f000 fa17 	bl	80009d8 <MX_USART2_UART_Init>

    /* Initialisation */
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005aa:	2100      	movs	r1, #0
 80005ac:	4862      	ldr	r0, [pc, #392]	@ (8000738 <main+0x1a8>)
 80005ae:	f001 fcc7 	bl	8001f40 <HAL_TIM_PWM_Start>
    HAL_UART_Receive_IT(&huart2, (uint8_t *)uart_rx_buffer, 32);
 80005b2:	2220      	movs	r2, #32
 80005b4:	4961      	ldr	r1, [pc, #388]	@ (800073c <main+0x1ac>)
 80005b6:	4862      	ldr	r0, [pc, #392]	@ (8000740 <main+0x1b0>)
 80005b8:	f002 fa77 	bl	8002aaa <HAL_UART_Receive_IT>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  // R_EN
 80005bc:	2201      	movs	r2, #1
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	4860      	ldr	r0, [pc, #384]	@ (8000744 <main+0x1b4>)
 80005c2:	f000 ffbb 	bl	800153c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // L_EN
 80005c6:	2201      	movs	r2, #1
 80005c8:	2140      	movs	r1, #64	@ 0x40
 80005ca:	485e      	ldr	r0, [pc, #376]	@ (8000744 <main+0x1b4>)
 80005cc:	f000 ffb6 	bl	800153c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // LPWM
 80005d0:	2200      	movs	r2, #0
 80005d2:	2120      	movs	r1, #32
 80005d4:	485b      	ldr	r0, [pc, #364]	@ (8000744 <main+0x1b4>)
 80005d6:	f000 ffb1 	bl	800153c <HAL_GPIO_WritePin>

    UART_Send_Debug("System Initialized\r\n");
 80005da:	485b      	ldr	r0, [pc, #364]	@ (8000748 <main+0x1b8>)
 80005dc:	f000 f8ec 	bl	80007b8 <UART_Send_Debug>

    while (1) {
    	  if(uart_rx_flag) {
 80005e0:	4b5a      	ldr	r3, [pc, #360]	@ (800074c <main+0x1bc>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d068      	beq.n	80006bc <main+0x12c>
    	            uart_rx_flag = 0;
 80005ea:	4b58      	ldr	r3, [pc, #352]	@ (800074c <main+0x1bc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]

    	            // Analyser les données reçues
    	            int num_fingers;
    	            char hand_type[10];
    	            sscanf((char *)uart_rx_buffer, "%d,%s", &num_fingers, hand_type);  // Conversion en char *
 80005f0:	463b      	mov	r3, r7
 80005f2:	f107 020c 	add.w	r2, r7, #12
 80005f6:	4956      	ldr	r1, [pc, #344]	@ (8000750 <main+0x1c0>)
 80005f8:	4850      	ldr	r0, [pc, #320]	@ (800073c <main+0x1ac>)
 80005fa:	f003 f9d1 	bl	80039a0 <siscanf>

    	            // Contrôle du moteur
    	            if(num_fingers == 0) {
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d106      	bne.n	8000612 <main+0x82>
    	                motor_speed = 0;  // Arrêter le moteur
 8000604:	4b53      	ldr	r3, [pc, #332]	@ (8000754 <main+0x1c4>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
    	                motor_direction = 0;  // Pas de direction
 800060a:	4b53      	ldr	r3, [pc, #332]	@ (8000758 <main+0x1c8>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	e01f      	b.n	8000652 <main+0xc2>
    	            }
    	            else {
    	                motor_speed = num_fingers * 20;  // Vitesse proportionnelle au nombre de doigts (1-5)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	0092      	lsls	r2, r2, #2
 800061a:	4413      	add	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b4c      	ldr	r3, [pc, #304]	@ (8000754 <main+0x1c4>)
 8000622:	701a      	strb	r2, [r3, #0]
    	                if(strcmp(hand_type, "Right") == 0) {
 8000624:	463b      	mov	r3, r7
 8000626:	494d      	ldr	r1, [pc, #308]	@ (800075c <main+0x1cc>)
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fdd1 	bl	80001d0 <strcmp>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d103      	bne.n	800063c <main+0xac>
    	                    motor_direction = 2;  // Sens horaire
 8000634:	4b48      	ldr	r3, [pc, #288]	@ (8000758 <main+0x1c8>)
 8000636:	2202      	movs	r2, #2
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	e00a      	b.n	8000652 <main+0xc2>
    	                }
    	                else if(strcmp(hand_type, "Left") == 0) {
 800063c:	463b      	mov	r3, r7
 800063e:	4948      	ldr	r1, [pc, #288]	@ (8000760 <main+0x1d0>)
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdc5 	bl	80001d0 <strcmp>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d102      	bne.n	8000652 <main+0xc2>
    	                    motor_direction = 1;  // Sens anti-horaire
 800064c:	4b42      	ldr	r3, [pc, #264]	@ (8000758 <main+0x1c8>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
    	                }
    	            }

    	            // Appliquer la vitesse et la direction
    	            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (motor_speed * 999) / 100);
 8000652:	4b40      	ldr	r3, [pc, #256]	@ (8000754 <main+0x1c4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800065c:	fb02 f303 	mul.w	r3, r2, r3
 8000660:	4a40      	ldr	r2, [pc, #256]	@ (8000764 <main+0x1d4>)
 8000662:	fb82 1203 	smull	r1, r2, r2, r3
 8000666:	1152      	asrs	r2, r2, #5
 8000668:	17db      	asrs	r3, r3, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <main+0x1a8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	635a      	str	r2, [r3, #52]	@ 0x34

    	            // Contrôle de la direction (exemple avec deux broches GPIO)
    	            if(motor_direction == 1) {
 8000672:	4b39      	ldr	r3, [pc, #228]	@ (8000758 <main+0x1c8>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d105      	bne.n	8000686 <main+0xf6>
    	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  // Sens anti-horaire
 800067a:	2200      	movs	r2, #0
 800067c:	2120      	movs	r1, #32
 800067e:	4831      	ldr	r0, [pc, #196]	@ (8000744 <main+0x1b4>)
 8000680:	f000 ff5c 	bl	800153c <HAL_GPIO_WritePin>
 8000684:	e00e      	b.n	80006a4 <main+0x114>
    	            }
    	            else if(motor_direction == 2) {
 8000686:	4b34      	ldr	r3, [pc, #208]	@ (8000758 <main+0x1c8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d105      	bne.n	800069a <main+0x10a>
    	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  // Sens horaire
 800068e:	2201      	movs	r2, #1
 8000690:	2120      	movs	r1, #32
 8000692:	482c      	ldr	r0, [pc, #176]	@ (8000744 <main+0x1b4>)
 8000694:	f000 ff52 	bl	800153c <HAL_GPIO_WritePin>
 8000698:	e004      	b.n	80006a4 <main+0x114>
    	            }
    	            else {
    	                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  // Arrêt
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	4829      	ldr	r0, [pc, #164]	@ (8000744 <main+0x1b4>)
 80006a0:	f000 ff4c 	bl	800153c <HAL_GPIO_WritePin>
    	            }

    	            // Envoyer un message de debug
    	            UART_Send_Debug("Fingers: %d, Hand: %s, Speed: %d%%, Direction: %d\r\n",
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <main+0x1c4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <main+0x1c8>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	463a      	mov	r2, r7
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4603      	mov	r3, r0
 80006b6:	482c      	ldr	r0, [pc, #176]	@ (8000768 <main+0x1d8>)
 80006b8:	f000 f87e 	bl	80007b8 <UART_Send_Debug>
    	                             num_fingers, hand_type, motor_speed, motor_direction);
    	        }

    	        /* Error Handling */
    	        if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_ORE)) {
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <main+0x1b0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	2b08      	cmp	r3, #8
 80006c8:	d107      	bne.n	80006da <main+0x14a>
    	            __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_ORE);
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <main+0x1b0>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f06f 0208 	mvn.w	r2, #8
 80006d2:	601a      	str	r2, [r3, #0]
    	            UART_Send_Debug("UART Overrun!\r\n");
 80006d4:	4825      	ldr	r0, [pc, #148]	@ (800076c <main+0x1dc>)
 80006d6:	f000 f86f 	bl	80007b8 <UART_Send_Debug>
    	        }
    	        if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_NE)) {
 80006da:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <main+0x1b0>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	2b04      	cmp	r3, #4
 80006e6:	d107      	bne.n	80006f8 <main+0x168>
    	            __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_NE);
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <main+0x1b0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f06f 0204 	mvn.w	r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
    	            UART_Send_Debug("Noise Error!\r\n");
 80006f2:	481f      	ldr	r0, [pc, #124]	@ (8000770 <main+0x1e0>)
 80006f4:	f000 f860 	bl	80007b8 <UART_Send_Debug>
    	        }
    	        if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_FE)) {
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <main+0x1b0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	2b02      	cmp	r3, #2
 8000704:	d107      	bne.n	8000716 <main+0x186>
    	            __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_FE);
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <main+0x1b0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f06f 0202 	mvn.w	r2, #2
 800070e:	601a      	str	r2, [r3, #0]
    	            UART_Send_Debug("Framing Error!\r\n");
 8000710:	4818      	ldr	r0, [pc, #96]	@ (8000774 <main+0x1e4>)
 8000712:	f000 f851 	bl	80007b8 <UART_Send_Debug>
    	        }
    	        if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_PE)) {
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <main+0x1b0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b01      	cmp	r3, #1
 8000722:	f47f af5d 	bne.w	80005e0 <main+0x50>
    	            __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_PE);
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <main+0x1b0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f06f 0201 	mvn.w	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
    	            UART_Send_Debug("Parity Error!\r\n");
 8000730:	4811      	ldr	r0, [pc, #68]	@ (8000778 <main+0x1e8>)
 8000732:	f000 f841 	bl	80007b8 <UART_Send_Debug>
    	  if(uart_rx_flag) {
 8000736:	e753      	b.n	80005e0 <main+0x50>
 8000738:	20000078 	.word	0x20000078
 800073c:	20000108 	.word	0x20000108
 8000740:	200000c0 	.word	0x200000c0
 8000744:	40020400 	.word	0x40020400
 8000748:	08004c78 	.word	0x08004c78
 800074c:	20000128 	.word	0x20000128
 8000750:	08004c90 	.word	0x08004c90
 8000754:	20000129 	.word	0x20000129
 8000758:	2000012a 	.word	0x2000012a
 800075c:	08004c98 	.word	0x08004c98
 8000760:	08004ca0 	.word	0x08004ca0
 8000764:	51eb851f 	.word	0x51eb851f
 8000768:	08004ca8 	.word	0x08004ca8
 800076c:	08004cdc 	.word	0x08004cdc
 8000770:	08004cec 	.word	0x08004cec
 8000774:	08004cfc 	.word	0x08004cfc
 8000778:	08004d10 	.word	0x08004d10

0800077c <HAL_UART_RxCpltCallback>:
    	        }
    	    }
    	}

/* UART Interrupt Callback */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <HAL_UART_RxCpltCallback+0x2c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d107      	bne.n	800079e <HAL_UART_RxCpltCallback+0x22>
        uart_rx_flag = 1;
 800078e:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <HAL_UART_RxCpltCallback+0x30>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t *)uart_rx_buffer, 32);  // Réarmement de la réception
 8000794:	2220      	movs	r2, #32
 8000796:	4906      	ldr	r1, [pc, #24]	@ (80007b0 <HAL_UART_RxCpltCallback+0x34>)
 8000798:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <HAL_UART_RxCpltCallback+0x38>)
 800079a:	f002 f986 	bl	8002aaa <HAL_UART_Receive_IT>
    }
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40004400 	.word	0x40004400
 80007ac:	20000128 	.word	0x20000128
 80007b0:	20000108 	.word	0x20000108
 80007b4:	200000c0 	.word	0x200000c0

080007b8 <UART_Send_Debug>:

/* Debug Function (printf-like) */
void UART_Send_Debug(const char *format, ...) {
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	607b      	str	r3, [r7, #4]
    vsnprintf(debug_buffer, DEBUG_MSG_SIZE, format, args);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	693a      	ldr	r2, [r7, #16]
 80007ca:	2180      	movs	r1, #128	@ 0x80
 80007cc:	4809      	ldr	r0, [pc, #36]	@ (80007f4 <UART_Send_Debug+0x3c>)
 80007ce:	f003 f93f 	bl	8003a50 <vsniprintf>
    va_end(args);
    HAL_UART_Transmit(&huart2, (uint8_t *)debug_buffer, strlen(debug_buffer), 100);
 80007d2:	4808      	ldr	r0, [pc, #32]	@ (80007f4 <UART_Send_Debug+0x3c>)
 80007d4:	f7ff fd06 	bl	80001e4 <strlen>
 80007d8:	4603      	mov	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	4905      	ldr	r1, [pc, #20]	@ (80007f4 <UART_Send_Debug+0x3c>)
 80007e0:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <UART_Send_Debug+0x40>)
 80007e2:	f002 f8d7 	bl	8002994 <HAL_UART_Transmit>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f0:	b004      	add	sp, #16
 80007f2:	4770      	bx	lr
 80007f4:	2000012c 	.word	0x2000012c
 80007f8:	200000c0 	.word	0x200000c0

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f003 f92e 	bl	8003a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	@ (80008c8 <SystemClock_Config+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	@ (80008cc <SystemClock_Config+0xd0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800086c:	2308      	movs	r3, #8
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000870:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000874:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000876:	2302      	movs	r3, #2
 8000878:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800087a:	2307      	movs	r3, #7
 800087c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fe74 	bl	8001570 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800088e:	f000 f91d 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2105      	movs	r1, #5
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 f8d5 	bl	8001a60 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008bc:	f000 f906 	bl	8000acc <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b092      	sub	sp, #72	@ 0x48
 80008d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2220      	movs	r2, #32
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f003 f8b6 	bl	8003a6c <memset>

  htim1.Instance = TIM1;
 8000900:	4b33      	ldr	r3, [pc, #204]	@ (80009d0 <MX_TIM1_Init+0x100>)
 8000902:	4a34      	ldr	r2, [pc, #208]	@ (80009d4 <MX_TIM1_Init+0x104>)
 8000904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000906:	4b32      	ldr	r3, [pc, #200]	@ (80009d0 <MX_TIM1_Init+0x100>)
 8000908:	2253      	movs	r2, #83	@ 0x53
 800090a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b30      	ldr	r3, [pc, #192]	@ (80009d0 <MX_TIM1_Init+0x100>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000912:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <MX_TIM1_Init+0x100>)
 8000914:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <MX_TIM1_Init+0x100>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000920:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <MX_TIM1_Init+0x100>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <MX_TIM1_Init+0x100>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800092c:	4828      	ldr	r0, [pc, #160]	@ (80009d0 <MX_TIM1_Init+0x100>)
 800092e:	f001 fab7 	bl	8001ea0 <HAL_TIM_PWM_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000938:	f000 f8c8 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000944:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000948:	4619      	mov	r1, r3
 800094a:	4821      	ldr	r0, [pc, #132]	@ (80009d0 <MX_TIM1_Init+0x100>)
 800094c:	f001 ff04 	bl	8002758 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000956:	f000 f8b9 	bl	8000acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	@ 0x60
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	4814      	ldr	r0, [pc, #80]	@ (80009d0 <MX_TIM1_Init+0x100>)
 8000980:	f001 fba6 	bl	80020d0 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800098a:	f000 f89f 	bl	8000acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <MX_TIM1_Init+0x100>)
 80009b2:	f001 ff4d 	bl	8002850 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80009bc:	f000 f886 	bl	8000acc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80009c0:	4803      	ldr	r0, [pc, #12]	@ (80009d0 <MX_TIM1_Init+0x100>)
 80009c2:	f000 f8d3 	bl	8000b6c <HAL_TIM_MspPostInit>
}
 80009c6:	bf00      	nop
 80009c8:	3748      	adds	r7, #72	@ 0x48
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000078 	.word	0x20000078
 80009d4:	40010000 	.word	0x40010000

080009d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009de:	4a12      	ldr	r2, [pc, #72]	@ (8000a28 <MX_USART2_UART_Init+0x50>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f001 ff70 	bl	80028f4 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a1a:	f000 f857 	bl	8000acc <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000c0 	.word	0x200000c0
 8000a28:	40004400 	.word	0x40004400

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_GPIO_Init+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	21e0      	movs	r1, #224	@ 0xe0
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <MX_GPIO_Init+0x9c>)
 8000a9c:	f000 fd4e 	bl	800153c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aa0:	23e0      	movs	r3, #224	@ 0xe0
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_GPIO_Init+0x9c>)
 8000ab8:	f000 fba4 	bl	8001204 <HAL_GPIO_Init>
}
 8000abc:	bf00      	nop
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020400 	.word	0x40020400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aee:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b16:	2007      	movs	r0, #7
 8000b18:	f000 faa0 	bl	800105c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_TIM_PWM_MspInit+0x3c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10d      	bne.n	8000b56 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b42:	4a09      	ldr	r2, [pc, #36]	@ (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4a:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <HAL_TIM_PWM_MspInit+0x40>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40010000 	.word	0x40010000
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <HAL_TIM_MspPostInit+0x68>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d11e      	bne.n	8000bcc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60bb      	str	r3, [r7, #8]
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <HAL_TIM_MspPostInit+0x6c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000baa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <HAL_TIM_MspPostInit+0x70>)
 8000bc8:	f000 fb1c 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	@ 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c74 <HAL_UART_MspInit+0x94>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d133      	bne.n	8000c6a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <HAL_UART_MspInit+0x98>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <HAL_UART_MspInit+0x98>)
 8000c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <HAL_UART_MspInit+0x98>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_UART_MspInit+0x98>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <HAL_UART_MspInit+0x98>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_UART_MspInit+0x98>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <HAL_UART_MspInit+0x9c>)
 8000c56:	f000 fad5 	bl	8001204 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2026      	movs	r0, #38	@ 0x26
 8000c60:	f000 fa07 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c64:	2026      	movs	r0, #38	@ 0x26
 8000c66:	f000 fa20 	bl	80010aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	@ 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40004400 	.word	0x40004400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f8d1 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <USART2_IRQHandler+0x10>)
 8000ce6:	f001 ff05 	bl	8002af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200000c0 	.word	0x200000c0

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f002 feaa 	bl	8003a7c <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	200001ac 	.word	0x200001ac
 8000d5c:	20000300 	.word	0x20000300

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f002 fe69 	bl	8003a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fbeb 	bl	8000590 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000dc8:	08004ea4 	.word	0x08004ea4
  ldr r2, =_sbss
 8000dcc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dd0:	200002fc 	.word	0x200002fc

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f92b 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fe64 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f943 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f90b 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	200001b0 	.word	0x200001b0

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200001b0 	.word	0x200001b0

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	@ (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	@ (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	@ (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	@ 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	@ (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff29 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff3e 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff31 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa2 	bl	8001018 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b084      	sub	sp, #16
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ec:	f7ff feda 	bl	8000ea4 <HAL_GetTick>
 80010f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d008      	beq.n	8001110 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2280      	movs	r2, #128	@ 0x80
 8001102:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e052      	b.n	80011b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 0216 	bic.w	r2, r2, #22
 800111e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800112e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <HAL_DMA_Abort+0x62>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0208 	bic.w	r2, r2, #8
 800114e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001160:	e013      	b.n	800118a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001162:	f7ff fe9f 	bl	8000ea4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b05      	cmp	r3, #5
 800116e:	d90c      	bls.n	800118a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2220      	movs	r2, #32
 8001174:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2203      	movs	r2, #3
 800117a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e015      	b.n	80011b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e4      	bne.n	8001162 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800119c:	223f      	movs	r2, #63	@ 0x3f
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d004      	beq.n	80011dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2280      	movs	r2, #128	@ 0x80
 80011d6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e00c      	b.n	80011f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2205      	movs	r2, #5
 80011e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e16b      	b.n	80014f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 815a 	bne.w	80014f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80b4 	beq.w	80014f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b60      	ldr	r3, [pc, #384]	@ (8001510 <HAL_GPIO_Init+0x30c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a5f      	ldr	r2, [pc, #380]	@ (8001510 <HAL_GPIO_Init+0x30c>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b5d      	ldr	r3, [pc, #372]	@ (8001510 <HAL_GPIO_Init+0x30c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001514 <HAL_GPIO_Init+0x310>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a52      	ldr	r2, [pc, #328]	@ (8001518 <HAL_GPIO_Init+0x314>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d02b      	beq.n	800142a <HAL_GPIO_Init+0x226>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a51      	ldr	r2, [pc, #324]	@ (800151c <HAL_GPIO_Init+0x318>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d025      	beq.n	8001426 <HAL_GPIO_Init+0x222>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a50      	ldr	r2, [pc, #320]	@ (8001520 <HAL_GPIO_Init+0x31c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d01f      	beq.n	8001422 <HAL_GPIO_Init+0x21e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001524 <HAL_GPIO_Init+0x320>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x21a>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001528 <HAL_GPIO_Init+0x324>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x216>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	@ (800152c <HAL_GPIO_Init+0x328>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x212>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001530 <HAL_GPIO_Init+0x32c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x20e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4b      	ldr	r2, [pc, #300]	@ (8001534 <HAL_GPIO_Init+0x330>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x20a>
 800140a:	2307      	movs	r3, #7
 800140c:	e00e      	b.n	800142c <HAL_GPIO_Init+0x228>
 800140e:	2308      	movs	r3, #8
 8001410:	e00c      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001412:	2306      	movs	r3, #6
 8001414:	e00a      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001416:	2305      	movs	r3, #5
 8001418:	e008      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141a:	2304      	movs	r3, #4
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x228>
 800141e:	2303      	movs	r3, #3
 8001420:	e004      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001422:	2302      	movs	r3, #2
 8001424:	e002      	b.n	800142c <HAL_GPIO_Init+0x228>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x228>
 800142a:	2300      	movs	r3, #0
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	f002 0203 	and.w	r2, r2, #3
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	4093      	lsls	r3, r2
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143c:	4935      	ldr	r1, [pc, #212]	@ (8001514 <HAL_GPIO_Init+0x310>)
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144a:	4b3b      	ldr	r3, [pc, #236]	@ (8001538 <HAL_GPIO_Init+0x334>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800146e:	4a32      	ldr	r2, [pc, #200]	@ (8001538 <HAL_GPIO_Init+0x334>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001474:	4b30      	ldr	r3, [pc, #192]	@ (8001538 <HAL_GPIO_Init+0x334>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001498:	4a27      	ldr	r2, [pc, #156]	@ (8001538 <HAL_GPIO_Init+0x334>)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4013      	ands	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014ba:	69ba      	ldr	r2, [r7, #24]
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014ec:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <HAL_GPIO_Init+0x334>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	2b0f      	cmp	r3, #15
 80014fc:	f67f ae90 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40013800 	.word	0x40013800
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	40020800 	.word	0x40020800
 8001524:	40020c00 	.word	0x40020c00
 8001528:	40021000 	.word	0x40021000
 800152c:	40021400 	.word	0x40021400
 8001530:	40021800 	.word	0x40021800
 8001534:	40021c00 	.word	0x40021c00
 8001538:	40013c00 	.word	0x40013c00

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	619a      	str	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e267      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	2b00      	cmp	r3, #0
 800158c:	d075      	beq.n	800167a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800158e:	4b88      	ldr	r3, [pc, #544]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b04      	cmp	r3, #4
 8001598:	d00c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800159a:	4b85      	ldr	r3, [pc, #532]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d112      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015a6:	4b82      	ldr	r3, [pc, #520]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015b2:	d10b      	bne.n	80015cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4b7e      	ldr	r3, [pc, #504]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05b      	beq.n	8001678 <HAL_RCC_OscConfig+0x108>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d157      	bne.n	8001678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e242      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x74>
 80015d6:	4b76      	ldr	r3, [pc, #472]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a75      	ldr	r2, [pc, #468]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e01d      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x98>
 80015ee:	4b70      	ldr	r3, [pc, #448]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6f      	ldr	r2, [pc, #444]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	4b6d      	ldr	r3, [pc, #436]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a6c      	ldr	r2, [pc, #432]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0xb0>
 8001608:	4b69      	ldr	r3, [pc, #420]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a68      	ldr	r2, [pc, #416]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b66      	ldr	r3, [pc, #408]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a65      	ldr	r2, [pc, #404]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 800161a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d013      	beq.n	8001650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001628:	f7ff fc3c 	bl	8000ea4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fc38 	bl	8000ea4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	@ 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e207      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b5b      	ldr	r3, [pc, #364]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0xc0>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fc28 	bl	8000ea4 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fc24 	bl	8000ea4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	@ 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e1f3      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	4b51      	ldr	r3, [pc, #324]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0xe8>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d063      	beq.n	800174e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00b      	beq.n	80016aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001692:	4b47      	ldr	r3, [pc, #284]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800169a:	2b08      	cmp	r3, #8
 800169c:	d11c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800169e:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d116      	bne.n	80016d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016aa:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d005      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e1c7      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c2:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4937      	ldr	r1, [pc, #220]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	e03a      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e0:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <HAL_RCC_OscConfig+0x244>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fbdd 	bl	8000ea4 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fbd9 	bl	8000ea4 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e1a8      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4925      	ldr	r1, [pc, #148]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e015      	b.n	800174e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <HAL_RCC_OscConfig+0x244>)
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fbbc 	bl	8000ea4 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fbb8 	bl	8000ea4 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e187      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d036      	beq.n	80017c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fb9c 	bl	8000ea4 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fb98 	bl	8000ea4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e167      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_RCC_OscConfig+0x240>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x200>
 800178e:	e01b      	b.n	80017c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <HAL_RCC_OscConfig+0x248>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001796:	f7ff fb85 	bl	8000ea4 <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	e00e      	b.n	80017bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fb81 	bl	8000ea4 <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d907      	bls.n	80017bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e150      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80017b0:	40023800 	.word	0x40023800
 80017b4:	42470000 	.word	0x42470000
 80017b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017bc:	4b88      	ldr	r3, [pc, #544]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ea      	bne.n	800179e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8097 	beq.w	8001904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017da:	4b81      	ldr	r3, [pc, #516]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10f      	bne.n	8001806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b7d      	ldr	r3, [pc, #500]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	4a7c      	ldr	r2, [pc, #496]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f6:	4b7a      	ldr	r3, [pc, #488]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001802:	2301      	movs	r3, #1
 8001804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b77      	ldr	r3, [pc, #476]	@ (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001812:	4b74      	ldr	r3, [pc, #464]	@ (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a73      	ldr	r2, [pc, #460]	@ (80019e4 <HAL_RCC_OscConfig+0x474>)
 8001818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800181c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800181e:	f7ff fb41 	bl	8000ea4 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001826:	f7ff fb3d 	bl	8000ea4 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e10c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	4b6a      	ldr	r3, [pc, #424]	@ (80019e4 <HAL_RCC_OscConfig+0x474>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d106      	bne.n	800185a <HAL_RCC_OscConfig+0x2ea>
 800184c:	4b64      	ldr	r3, [pc, #400]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 800184e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001850:	4a63      	ldr	r2, [pc, #396]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6713      	str	r3, [r2, #112]	@ 0x70
 8001858:	e01c      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x30c>
 8001862:	4b5f      	ldr	r3, [pc, #380]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001866:	4a5e      	ldr	r2, [pc, #376]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6713      	str	r3, [r2, #112]	@ 0x70
 800186e:	4b5c      	ldr	r3, [pc, #368]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001872:	4a5b      	ldr	r2, [pc, #364]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6713      	str	r3, [r2, #112]	@ 0x70
 800187a:	e00b      	b.n	8001894 <HAL_RCC_OscConfig+0x324>
 800187c:	4b58      	ldr	r3, [pc, #352]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001880:	4a57      	ldr	r2, [pc, #348]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001882:	f023 0301 	bic.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	@ 0x70
 8001888:	4b55      	ldr	r3, [pc, #340]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800188c:	4a54      	ldr	r2, [pc, #336]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d015      	beq.n	80018c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff fb02 	bl	8000ea4 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff fafe 	bl	8000ea4 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e0cb      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ba:	4b49      	ldr	r3, [pc, #292]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ee      	beq.n	80018a4 <HAL_RCC_OscConfig+0x334>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c8:	f7ff faec 	bl	8000ea4 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff fae8 	bl	8000ea4 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e0b5      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e6:	4b3e      	ldr	r3, [pc, #248]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1ee      	bne.n	80018d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018f8:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fc:	4a38      	ldr	r2, [pc, #224]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a1 	beq.w	8001a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800190e:	4b34      	ldr	r3, [pc, #208]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b08      	cmp	r3, #8
 8001918:	d05c      	beq.n	80019d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d141      	bne.n	80019a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <HAL_RCC_OscConfig+0x478>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fabc 	bl	8000ea4 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fab8 	bl	8000ea4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e087      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	4b27      	ldr	r3, [pc, #156]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a1b      	ldr	r3, [r3, #32]
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195c:	019b      	lsls	r3, r3, #6
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	061b      	lsls	r3, r3, #24
 8001972:	491b      	ldr	r1, [pc, #108]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_RCC_OscConfig+0x478>)
 800197a:	2201      	movs	r2, #1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fa91 	bl	8000ea4 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff fa8d 	bl	8000ea4 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e05c      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x416>
 80019a4:	e054      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa7a 	bl	8000ea4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff fa76 	bl	8000ea4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e045      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x444>
 80019d2:	e03d      	b.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e038      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40007000 	.word	0x40007000
 80019e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x4ec>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d121      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d11a      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d111      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0cc      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a74:	4b68      	ldr	r3, [pc, #416]	@ (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d90c      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a82:	4b65      	ldr	r3, [pc, #404]	@ (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b8      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ab4:	4b59      	ldr	r3, [pc, #356]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a58      	ldr	r2, [pc, #352]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001acc:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b50      	ldr	r3, [pc, #320]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	494d      	ldr	r1, [pc, #308]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d044      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afe:	4b47      	ldr	r3, [pc, #284]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d109      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e06f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e067      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b3e:	4b37      	ldr	r3, [pc, #220]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f023 0203 	bic.w	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	4934      	ldr	r1, [pc, #208]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b50:	f7ff f9a8 	bl	8000ea4 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b58:	f7ff f9a4 	bl	8000ea4 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e04f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 020c 	and.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d1eb      	bne.n	8001b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20c      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b96:	4b20      	ldr	r3, [pc, #128]	@ (8001c18 <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e032      	b.n	8001c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	4916      	ldr	r1, [pc, #88]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d009      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd2:	4b12      	ldr	r3, [pc, #72]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	490e      	ldr	r1, [pc, #56]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001be6:	f000 f821 	bl	8001c2c <HAL_RCC_GetSysClockFreq>
 8001bea:	4602      	mov	r2, r0
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	490a      	ldr	r1, [pc, #40]	@ (8001c20 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	5ccb      	ldrb	r3, [r1, r3]
 8001bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfe:	4a09      	ldr	r2, [pc, #36]	@ (8001c24 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <HAL_RCC_ClockConfig+0x1c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f908 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023c00 	.word	0x40023c00
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08004d2c 	.word	0x08004d2c
 8001c24:	20000000 	.word	0x20000000
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c30:	b094      	sub	sp, #80	@ 0x50
 8001c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c34:	2300      	movs	r3, #0
 8001c36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c44:	4b79      	ldr	r3, [pc, #484]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d00d      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x40>
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	f200 80e1 	bhi.w	8001e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d003      	beq.n	8001c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5e:	e0db      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b73      	ldr	r3, [pc, #460]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c64:	e0db      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c66:	4b73      	ldr	r3, [pc, #460]	@ (8001e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c6a:	e0d8      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c76:	4b6d      	ldr	r3, [pc, #436]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d063      	beq.n	8001d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c82:	4b6a      	ldr	r3, [pc, #424]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	099b      	lsrs	r3, r3, #6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c94:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c9e:	4622      	mov	r2, r4
 8001ca0:	462b      	mov	r3, r5
 8001ca2:	f04f 0000 	mov.w	r0, #0
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	0159      	lsls	r1, r3, #5
 8001cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb0:	0150      	lsls	r0, r2, #5
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	1a51      	subs	r1, r2, r1
 8001cba:	6139      	str	r1, [r7, #16]
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cd0:	4659      	mov	r1, fp
 8001cd2:	018b      	lsls	r3, r1, #6
 8001cd4:	4651      	mov	r1, sl
 8001cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cda:	4651      	mov	r1, sl
 8001cdc:	018a      	lsls	r2, r1, #6
 8001cde:	4651      	mov	r1, sl
 8001ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8001cea:	f04f 0200 	mov.w	r2, #0
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cfe:	4690      	mov	r8, r2
 8001d00:	4699      	mov	r9, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	eb18 0303 	adds.w	r3, r8, r3
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	eb49 0303 	adc.w	r3, r9, r3
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	024b      	lsls	r3, r1, #9
 8001d22:	4621      	mov	r1, r4
 8001d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d28:	4621      	mov	r1, r4
 8001d2a:	024a      	lsls	r2, r1, #9
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d32:	2200      	movs	r2, #0
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d3c:	f7fe fab0 	bl	80002a0 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d48:	e058      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4a:	4b38      	ldr	r3, [pc, #224]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	2200      	movs	r2, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	4611      	mov	r1, r2
 8001d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d64:	4642      	mov	r2, r8
 8001d66:	464b      	mov	r3, r9
 8001d68:	f04f 0000 	mov.w	r0, #0
 8001d6c:	f04f 0100 	mov.w	r1, #0
 8001d70:	0159      	lsls	r1, r3, #5
 8001d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d76:	0150      	lsls	r0, r2, #5
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4641      	mov	r1, r8
 8001d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d82:	4649      	mov	r1, r9
 8001d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001da0:	eb63 050b 	sbc.w	r5, r3, fp
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	00eb      	lsls	r3, r5, #3
 8001dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001db2:	00e2      	lsls	r2, r4, #3
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	4643      	mov	r3, r8
 8001dba:	18e3      	adds	r3, r4, r3
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	464b      	mov	r3, r9
 8001dc0:	eb45 0303 	adc.w	r3, r5, r3
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	f04f 0300 	mov.w	r3, #0
 8001dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	028b      	lsls	r3, r1, #10
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ddc:	4621      	mov	r1, r4
 8001dde:	028a      	lsls	r2, r1, #10
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de6:	2200      	movs	r2, #0
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	61fa      	str	r2, [r7, #28]
 8001dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df0:	f7fe fa56 	bl	80002a0 <__aeabi_uldivmod>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4613      	mov	r3, r2
 8001dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0c1b      	lsrs	r3, r3, #16
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	3301      	adds	r3, #1
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3750      	adds	r7, #80	@ 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	007a1200 	.word	0x007a1200

08001e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b05      	ldr	r3, [pc, #20]	@ (8001e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a9b      	lsrs	r3, r3, #10
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4903      	ldr	r1, [pc, #12]	@ (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40023800 	.word	0x40023800
 8001e74:	08004d3c 	.word	0x08004d3c

08001e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e7c:	f7ff ffdc 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0b5b      	lsrs	r3, r3, #13
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	@ (8001e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08004d3c 	.word	0x08004d3c

08001ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e041      	b.n	8001f36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fe2e 	bl	8000b28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 f9b8 	bl	8002254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_TIM_PWM_Start+0x24>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e022      	b.n	8001faa <HAL_TIM_PWM_Start+0x6a>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d109      	bne.n	8001f7e <HAL_TIM_PWM_Start+0x3e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	e015      	b.n	8001faa <HAL_TIM_PWM_Start+0x6a>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d109      	bne.n	8001f98 <HAL_TIM_PWM_Start+0x58>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	bf14      	ite	ne
 8001f90:	2301      	movne	r3, #1
 8001f92:	2300      	moveq	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e008      	b.n	8001faa <HAL_TIM_PWM_Start+0x6a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e07c      	b.n	80020ac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <HAL_TIM_PWM_Start+0x82>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc0:	e013      	b.n	8001fea <HAL_TIM_PWM_Start+0xaa>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d104      	bne.n	8001fd2 <HAL_TIM_PWM_Start+0x92>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fd0:	e00b      	b.n	8001fea <HAL_TIM_PWM_Start+0xaa>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d104      	bne.n	8001fe2 <HAL_TIM_PWM_Start+0xa2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe0:	e003      	b.n	8001fea <HAL_TIM_PWM_Start+0xaa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fb8a 	bl	800270c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a2d      	ldr	r2, [pc, #180]	@ (80020b4 <HAL_TIM_PWM_Start+0x174>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d004      	beq.n	800200c <HAL_TIM_PWM_Start+0xcc>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a2c      	ldr	r2, [pc, #176]	@ (80020b8 <HAL_TIM_PWM_Start+0x178>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_TIM_PWM_Start+0xd0>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_TIM_PWM_Start+0xd2>
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d007      	beq.n	8002026 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002024:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a22      	ldr	r2, [pc, #136]	@ (80020b4 <HAL_TIM_PWM_Start+0x174>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d022      	beq.n	8002076 <HAL_TIM_PWM_Start+0x136>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002038:	d01d      	beq.n	8002076 <HAL_TIM_PWM_Start+0x136>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1f      	ldr	r2, [pc, #124]	@ (80020bc <HAL_TIM_PWM_Start+0x17c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d018      	beq.n	8002076 <HAL_TIM_PWM_Start+0x136>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a1d      	ldr	r2, [pc, #116]	@ (80020c0 <HAL_TIM_PWM_Start+0x180>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d013      	beq.n	8002076 <HAL_TIM_PWM_Start+0x136>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1c      	ldr	r2, [pc, #112]	@ (80020c4 <HAL_TIM_PWM_Start+0x184>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00e      	beq.n	8002076 <HAL_TIM_PWM_Start+0x136>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a16      	ldr	r2, [pc, #88]	@ (80020b8 <HAL_TIM_PWM_Start+0x178>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d009      	beq.n	8002076 <HAL_TIM_PWM_Start+0x136>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <HAL_TIM_PWM_Start+0x188>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_TIM_PWM_Start+0x136>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a16      	ldr	r2, [pc, #88]	@ (80020cc <HAL_TIM_PWM_Start+0x18c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d111      	bne.n	800209a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b06      	cmp	r3, #6
 8002086:	d010      	beq.n	80020aa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002098:	e007      	b.n	80020aa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40010000 	.word	0x40010000
 80020b8:	40010400 	.word	0x40010400
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800
 80020c4:	40000c00 	.word	0x40000c00
 80020c8:	40014000 	.word	0x40014000
 80020cc:	40001800 	.word	0x40001800

080020d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e0ae      	b.n	800224c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	f200 809f 	bhi.w	800223c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002104:	08002139 	.word	0x08002139
 8002108:	0800223d 	.word	0x0800223d
 800210c:	0800223d 	.word	0x0800223d
 8002110:	0800223d 	.word	0x0800223d
 8002114:	08002179 	.word	0x08002179
 8002118:	0800223d 	.word	0x0800223d
 800211c:	0800223d 	.word	0x0800223d
 8002120:	0800223d 	.word	0x0800223d
 8002124:	080021bb 	.word	0x080021bb
 8002128:	0800223d 	.word	0x0800223d
 800212c:	0800223d 	.word	0x0800223d
 8002130:	0800223d 	.word	0x0800223d
 8002134:	080021fb 	.word	0x080021fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f934 	bl	80023ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0208 	orr.w	r2, r2, #8
 8002152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0204 	bic.w	r2, r2, #4
 8002162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6999      	ldr	r1, [r3, #24]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	619a      	str	r2, [r3, #24]
      break;
 8002176:	e064      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68b9      	ldr	r1, [r7, #8]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f984 	bl	800248c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699a      	ldr	r2, [r3, #24]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6999      	ldr	r1, [r3, #24]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	021a      	lsls	r2, r3, #8
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	619a      	str	r2, [r3, #24]
      break;
 80021b8:	e043      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f9d9 	bl	8002578 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0208 	orr.w	r2, r2, #8
 80021d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	69da      	ldr	r2, [r3, #28]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0204 	bic.w	r2, r2, #4
 80021e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69d9      	ldr	r1, [r3, #28]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	61da      	str	r2, [r3, #28]
      break;
 80021f8:	e023      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	4618      	mov	r0, r3
 8002202:	f000 fa2d 	bl	8002660 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69da      	ldr	r2, [r3, #28]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	69d9      	ldr	r1, [r3, #28]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	021a      	lsls	r2, r3, #8
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	61da      	str	r2, [r3, #28]
      break;
 800223a:	e002      	b.n	8002242 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	75fb      	strb	r3, [r7, #23]
      break;
 8002240:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800224a:	7dfb      	ldrb	r3, [r7, #23]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a46      	ldr	r2, [pc, #280]	@ (8002380 <TIM_Base_SetConfig+0x12c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002272:	d00f      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a43      	ldr	r2, [pc, #268]	@ (8002384 <TIM_Base_SetConfig+0x130>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00b      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a42      	ldr	r2, [pc, #264]	@ (8002388 <TIM_Base_SetConfig+0x134>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d007      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a41      	ldr	r2, [pc, #260]	@ (800238c <TIM_Base_SetConfig+0x138>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d003      	beq.n	8002294 <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a40      	ldr	r2, [pc, #256]	@ (8002390 <TIM_Base_SetConfig+0x13c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d108      	bne.n	80022a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800229a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a35      	ldr	r2, [pc, #212]	@ (8002380 <TIM_Base_SetConfig+0x12c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b4:	d027      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a32      	ldr	r2, [pc, #200]	@ (8002384 <TIM_Base_SetConfig+0x130>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d023      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a31      	ldr	r2, [pc, #196]	@ (8002388 <TIM_Base_SetConfig+0x134>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d01f      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a30      	ldr	r2, [pc, #192]	@ (800238c <TIM_Base_SetConfig+0x138>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d01b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002390 <TIM_Base_SetConfig+0x13c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d017      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002394 <TIM_Base_SetConfig+0x140>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002398 <TIM_Base_SetConfig+0x144>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00f      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a2c      	ldr	r2, [pc, #176]	@ (800239c <TIM_Base_SetConfig+0x148>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d00b      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <TIM_Base_SetConfig+0x14c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d007      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a2a      	ldr	r2, [pc, #168]	@ (80023a4 <TIM_Base_SetConfig+0x150>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d003      	beq.n	8002306 <TIM_Base_SetConfig+0xb2>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a29      	ldr	r2, [pc, #164]	@ (80023a8 <TIM_Base_SetConfig+0x154>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d108      	bne.n	8002318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800230c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a10      	ldr	r2, [pc, #64]	@ (8002380 <TIM_Base_SetConfig+0x12c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_Base_SetConfig+0xf8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <TIM_Base_SetConfig+0x13c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d103      	bne.n	8002354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f023 0201 	bic.w	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]
  }
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40010000 	.word	0x40010000
 8002384:	40000400 	.word	0x40000400
 8002388:	40000800 	.word	0x40000800
 800238c:	40000c00 	.word	0x40000c00
 8002390:	40010400 	.word	0x40010400
 8002394:	40014000 	.word	0x40014000
 8002398:	40014400 	.word	0x40014400
 800239c:	40014800 	.word	0x40014800
 80023a0:	40001800 	.word	0x40001800
 80023a4:	40001c00 	.word	0x40001c00
 80023a8:	40002000 	.word	0x40002000

080023ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f023 0201 	bic.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f023 0302 	bic.w	r3, r3, #2
 80023f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a20      	ldr	r2, [pc, #128]	@ (8002484 <TIM_OC1_SetConfig+0xd8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <TIM_OC1_SetConfig+0x64>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a1f      	ldr	r2, [pc, #124]	@ (8002488 <TIM_OC1_SetConfig+0xdc>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d10c      	bne.n	800242a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0308 	bic.w	r3, r3, #8
 8002416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a15      	ldr	r2, [pc, #84]	@ (8002484 <TIM_OC1_SetConfig+0xd8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d003      	beq.n	800243a <TIM_OC1_SetConfig+0x8e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <TIM_OC1_SetConfig+0xdc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d111      	bne.n	800245e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	621a      	str	r2, [r3, #32]
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40010000 	.word	0x40010000
 8002488:	40010400 	.word	0x40010400

0800248c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	f023 0210 	bic.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f023 0320 	bic.w	r3, r3, #32
 80024d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a22      	ldr	r2, [pc, #136]	@ (8002570 <TIM_OC2_SetConfig+0xe4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <TIM_OC2_SetConfig+0x68>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a21      	ldr	r2, [pc, #132]	@ (8002574 <TIM_OC2_SetConfig+0xe8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d10d      	bne.n	8002510 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4313      	orrs	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800250e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a17      	ldr	r2, [pc, #92]	@ (8002570 <TIM_OC2_SetConfig+0xe4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d003      	beq.n	8002520 <TIM_OC2_SetConfig+0x94>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <TIM_OC2_SetConfig+0xe8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d113      	bne.n	8002548 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002526:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800252e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	621a      	str	r2, [r3, #32]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	40010400 	.word	0x40010400

08002578 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80025c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	021b      	lsls	r3, r3, #8
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a21      	ldr	r2, [pc, #132]	@ (8002658 <TIM_OC3_SetConfig+0xe0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d003      	beq.n	80025de <TIM_OC3_SetConfig+0x66>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a20      	ldr	r2, [pc, #128]	@ (800265c <TIM_OC3_SetConfig+0xe4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d10d      	bne.n	80025fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	021b      	lsls	r3, r3, #8
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80025f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a16      	ldr	r2, [pc, #88]	@ (8002658 <TIM_OC3_SetConfig+0xe0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_OC3_SetConfig+0x92>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a15      	ldr	r2, [pc, #84]	@ (800265c <TIM_OC3_SetConfig+0xe4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d113      	bne.n	8002632 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	621a      	str	r2, [r3, #32]
}
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40010000 	.word	0x40010000
 800265c:	40010400 	.word	0x40010400

08002660 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800268e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002696:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80026aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	031b      	lsls	r3, r3, #12
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <TIM_OC4_SetConfig+0xa4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <TIM_OC4_SetConfig+0x68>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <TIM_OC4_SetConfig+0xa8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d109      	bne.n	80026dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	019b      	lsls	r3, r3, #6
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4313      	orrs	r3, r2
 80026da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40010000 	.word	0x40010000
 8002708:	40010400 	.word	0x40010400

0800270c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2201      	movs	r2, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a1a      	ldr	r2, [r3, #32]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	43db      	mvns	r3, r3
 800272e:	401a      	ands	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	431a      	orrs	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	621a      	str	r2, [r3, #32]
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800276c:	2302      	movs	r3, #2
 800276e:	e05a      	b.n	8002826 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a21      	ldr	r2, [pc, #132]	@ (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027bc:	d01d      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d018      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002840 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00e      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a18      	ldr	r2, [pc, #96]	@ (8002844 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d009      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a17      	ldr	r2, [pc, #92]	@ (8002848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a15      	ldr	r2, [pc, #84]	@ (800284c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10c      	bne.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	4313      	orrs	r3, r2
 800280a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40010400 	.word	0x40010400
 8002848:	40014000 	.word	0x40014000
 800284c:	40001800 	.word	0x40001800

08002850 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002868:	2302      	movs	r3, #2
 800286a:	e03d      	b.n	80028e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e042      	b.n	800298c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe f960 	bl	8000be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	@ 0x24
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002936:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 fdbd 	bl	80034b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800294c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800295c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800296c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	@ 0x28
 8002998:	af02      	add	r7, sp, #8
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d175      	bne.n	8002aa0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_UART_Transmit+0x2c>
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e06e      	b.n	8002aa2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	@ 0x21
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029d2:	f7fe fa67 	bl	8000ea4 <HAL_GetTick>
 80029d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ec:	d108      	bne.n	8002a00 <HAL_UART_Transmit+0x6c>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	e003      	b.n	8002a08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a08:	e02e      	b.n	8002a68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	@ 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fb1f 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e03a      	b.n	8002aa2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	3302      	adds	r3, #2
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	e007      	b.n	8002a5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	3301      	adds	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1cb      	bne.n	8002a0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2140      	movs	r1, #64	@ 0x40
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 faeb 	bl	8003058 <UART_WaitOnFlagUntilTimeout>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e006      	b.n	8002aa2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e000      	b.n	8002aa2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d112      	bne.n	8002aea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_UART_Receive_IT+0x26>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e00b      	b.n	8002aec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ada:	88fb      	ldrh	r3, [r7, #6]
 8002adc:	461a      	mov	r2, r3
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fb12 	bl	800310a <UART_Start_Receive_IT>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	e000      	b.n	8002aec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002aea:	2302      	movs	r3, #2
  }
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b0ba      	sub	sp, #232	@ 0xe8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10f      	bne.n	8002b5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_UART_IRQHandler+0x66>
 8002b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fbf2 	bl	800333c <UART_Receive_IT>
      return;
 8002b58:	e25b      	b.n	8003012 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80de 	beq.w	8002d20 <HAL_UART_IRQHandler+0x22c>
 8002b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80d1 	beq.w	8002d20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_UART_IRQHandler+0xae>
 8002b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xd2>
 8002bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_UART_IRQHandler+0xf6>
 8002bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f043 0204 	orr.w	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d011      	beq.n	8002c1a <HAL_UART_IRQHandler+0x126>
 8002bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	f043 0208 	orr.w	r2, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 81f2 	beq.w	8003008 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_UART_IRQHandler+0x14e>
 8002c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fb7d 	bl	800333c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4c:	2b40      	cmp	r3, #64	@ 0x40
 8002c4e:	bf0c      	ite	eq
 8002c50:	2301      	moveq	r3, #1
 8002c52:	2300      	movne	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <HAL_UART_IRQHandler+0x17a>
 8002c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04f      	beq.n	8002d0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa85 	bl	800317e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7e:	2b40      	cmp	r3, #64	@ 0x40
 8002c80:	d141      	bne.n	8002d06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c90:	e853 3f00 	ldrex	r3, [r3]
 8002c94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002cae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1d9      	bne.n	8002c82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d013      	beq.n	8002cfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed4 <HAL_UART_IRQHandler+0x3e0>)
 8002cdc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fe fa6b 	bl	80011be <HAL_DMA_Abort_IT>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfc:	e00e      	b.n	8002d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f994 	bl	800302c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d04:	e00a      	b.n	8002d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f990 	bl	800302c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d0c:	e006      	b.n	8002d1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f98c 	bl	800302c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d1a:	e175      	b.n	8003008 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	bf00      	nop
    return;
 8002d1e:	e173      	b.n	8003008 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	f040 814f 	bne.w	8002fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8148 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f000 8141 	beq.w	8002fc8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d46:	2300      	movs	r3, #0
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d66:	2b40      	cmp	r3, #64	@ 0x40
 8002d68:	f040 80b6 	bne.w	8002ed8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 8145 	beq.w	800300c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	f080 813e 	bcs.w	800300c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da2:	f000 8088 	beq.w	8002eb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	330c      	adds	r3, #12
 8002dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002dd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002dd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002de2:	e841 2300 	strex	r3, r2, [r1]
 8002de6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1d9      	bne.n	8002da6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3314      	adds	r3, #20
 8002df8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e04:	f023 0301 	bic.w	r3, r3, #1
 8002e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3314      	adds	r3, #20
 8002e12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e1      	bne.n	8002df2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3314      	adds	r3, #20
 8002e34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e3      	bne.n	8002e2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	330c      	adds	r3, #12
 8002e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e7e:	e853 3f00 	ldrex	r3, [r3]
 8002e82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e86:	f023 0310 	bic.w	r3, r3, #16
 8002e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330c      	adds	r3, #12
 8002e94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ea0:	e841 2300 	strex	r3, r2, [r1]
 8002ea4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e3      	bne.n	8002e74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe f914 	bl	80010de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4619      	mov	r1, r3
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f8b7 	bl	8003040 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ed2:	e09b      	b.n	800300c <HAL_UART_IRQHandler+0x518>
 8002ed4:	08003245 	.word	0x08003245
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 808e 	beq.w	8003010 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 8089 	beq.w	8003010 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f22:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f24:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e3      	bne.n	8002efe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3314      	adds	r3, #20
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	623b      	str	r3, [r7, #32]
   return(result);
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	f023 0301 	bic.w	r3, r3, #1
 8002f4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3314      	adds	r3, #20
 8002f56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f62:	e841 2300 	strex	r3, r2, [r1]
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1e3      	bne.n	8002f36 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	e853 3f00 	ldrex	r3, [r3]
 8002f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0310 	bic.w	r3, r3, #16
 8002f92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fa0:	61fa      	str	r2, [r7, #28]
 8002fa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	69b9      	ldr	r1, [r7, #24]
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	617b      	str	r3, [r7, #20]
   return(result);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e3      	bne.n	8002f7c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f83d 	bl	8003040 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fc6:	e023      	b.n	8003010 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d009      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x4f4>
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f943 	bl	800326c <UART_Transmit_IT>
    return;
 8002fe6:	e014      	b.n	8003012 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <HAL_UART_IRQHandler+0x51e>
 8002ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f983 	bl	800330c <UART_EndTransmit_IT>
    return;
 8003006:	e004      	b.n	8003012 <HAL_UART_IRQHandler+0x51e>
    return;
 8003008:	bf00      	nop
 800300a:	e002      	b.n	8003012 <HAL_UART_IRQHandler+0x51e>
      return;
 800300c:	bf00      	nop
 800300e:	e000      	b.n	8003012 <HAL_UART_IRQHandler+0x51e>
      return;
 8003010:	bf00      	nop
  }
}
 8003012:	37e8      	adds	r7, #232	@ 0xe8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	4613      	mov	r3, r2
 8003066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003068:	e03b      	b.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d037      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fd ff17 	bl	8000ea4 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	6a3a      	ldr	r2, [r7, #32]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <UART_WaitOnFlagUntilTimeout+0x30>
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e03a      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d023      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b80      	cmp	r3, #128	@ 0x80
 800309e:	d020      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b40      	cmp	r3, #64	@ 0x40
 80030a4:	d01d      	beq.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d116      	bne.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f857 	bl	800317e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2208      	movs	r2, #8
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e00f      	b.n	8003102 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4013      	ands	r3, r2
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	461a      	mov	r2, r3
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d0b4      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	4613      	mov	r3, r2
 8003116:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2222      	movs	r2, #34	@ 0x22
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800317e:	b480      	push	{r7}
 8003180:	b095      	sub	sp, #84	@ 0x54
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800319c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e5      	bne.n	8003186 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3314      	adds	r3, #20
 80031c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3314      	adds	r3, #20
 80031d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e5      	bne.n	80031ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d119      	bne.n	800322a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	330c      	adds	r3, #12
 80031fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	e853 3f00 	ldrex	r3, [r3]
 8003204:	60bb      	str	r3, [r7, #8]
   return(result);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f023 0310 	bic.w	r3, r3, #16
 800320c:	647b      	str	r3, [r7, #68]	@ 0x44
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	330c      	adds	r3, #12
 8003214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003216:	61ba      	str	r2, [r7, #24]
 8003218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321a:	6979      	ldr	r1, [r7, #20]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	613b      	str	r3, [r7, #16]
   return(result);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e5      	bne.n	80031f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003238:	bf00      	nop
 800323a:	3754      	adds	r7, #84	@ 0x54
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff fee4 	bl	800302c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b21      	cmp	r3, #33	@ 0x21
 800327e:	d13e      	bne.n	80032fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003288:	d114      	bne.n	80032b4 <UART_Transmit_IT+0x48>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d110      	bne.n	80032b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	621a      	str	r2, [r3, #32]
 80032b2:	e008      	b.n	80032c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	1c59      	adds	r1, r3, #1
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6211      	str	r1, [r2, #32]
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4619      	mov	r1, r3
 80032d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003322:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff fe73 	bl	8003018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	@ 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b22      	cmp	r3, #34	@ 0x22
 800334e:	f040 80ae 	bne.w	80034ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335a:	d117      	bne.n	800338c <UART_Receive_IT+0x50>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d113      	bne.n	800338c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	b29a      	uxth	r2, r3
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	1c9a      	adds	r2, r3, #2
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	629a      	str	r2, [r3, #40]	@ 0x28
 800338a:	e026      	b.n	80033da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339e:	d007      	beq.n	80033b0 <UART_Receive_IT+0x74>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <UART_Receive_IT+0x82>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ba:	701a      	strb	r2, [r3, #0]
 80033bc:	e008      	b.n	80033d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4619      	mov	r1, r3
 80033e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d15d      	bne.n	80034aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0220 	bic.w	r2, r2, #32
 80033fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800340c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003430:	2b01      	cmp	r3, #1
 8003432:	d135      	bne.n	80034a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	330c      	adds	r3, #12
 8003440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	613b      	str	r3, [r7, #16]
   return(result);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f023 0310 	bic.w	r3, r3, #16
 8003450:	627b      	str	r3, [r7, #36]	@ 0x24
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345a:	623a      	str	r2, [r7, #32]
 800345c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	69f9      	ldr	r1, [r7, #28]
 8003460:	6a3a      	ldr	r2, [r7, #32]
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	61bb      	str	r3, [r7, #24]
   return(result);
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e5      	bne.n	800343a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d10a      	bne.n	8003492 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fdd1 	bl	8003040 <HAL_UARTEx_RxEventCallback>
 800349e:	e002      	b.n	80034a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fd f96b 	bl	800077c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e002      	b.n	80034b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034ae:	2302      	movs	r3, #2
  }
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3730      	adds	r7, #48	@ 0x30
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034bc:	b0c0      	sub	sp, #256	@ 0x100
 80034be:	af00      	add	r7, sp, #0
 80034c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80034d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d4:	68d9      	ldr	r1, [r3, #12]
 80034d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	ea40 0301 	orr.w	r3, r0, r1
 80034e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003510:	f021 010c 	bic.w	r1, r1, #12
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800351e:	430b      	orrs	r3, r1
 8003520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800352e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003532:	6999      	ldr	r1, [r3, #24]
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	ea40 0301 	orr.w	r3, r0, r1
 800353e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4b8f      	ldr	r3, [pc, #572]	@ (8003784 <UART_SetConfig+0x2cc>)
 8003548:	429a      	cmp	r2, r3
 800354a:	d005      	beq.n	8003558 <UART_SetConfig+0xa0>
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b8d      	ldr	r3, [pc, #564]	@ (8003788 <UART_SetConfig+0x2d0>)
 8003554:	429a      	cmp	r2, r3
 8003556:	d104      	bne.n	8003562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003558:	f7fe fc8e 	bl	8001e78 <HAL_RCC_GetPCLK2Freq>
 800355c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003560:	e003      	b.n	800356a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003562:	f7fe fc75 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8003566:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003574:	f040 810c 	bne.w	8003790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800357c:	2200      	movs	r2, #0
 800357e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003582:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800358a:	4622      	mov	r2, r4
 800358c:	462b      	mov	r3, r5
 800358e:	1891      	adds	r1, r2, r2
 8003590:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003592:	415b      	adcs	r3, r3
 8003594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800359a:	4621      	mov	r1, r4
 800359c:	eb12 0801 	adds.w	r8, r2, r1
 80035a0:	4629      	mov	r1, r5
 80035a2:	eb43 0901 	adc.w	r9, r3, r1
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ba:	4690      	mov	r8, r2
 80035bc:	4699      	mov	r9, r3
 80035be:	4623      	mov	r3, r4
 80035c0:	eb18 0303 	adds.w	r3, r8, r3
 80035c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035c8:	462b      	mov	r3, r5
 80035ca:	eb49 0303 	adc.w	r3, r9, r3
 80035ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035e6:	460b      	mov	r3, r1
 80035e8:	18db      	adds	r3, r3, r3
 80035ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80035ec:	4613      	mov	r3, r2
 80035ee:	eb42 0303 	adc.w	r3, r2, r3
 80035f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80035f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035fc:	f7fc fe50 	bl	80002a0 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4b61      	ldr	r3, [pc, #388]	@ (800378c <UART_SetConfig+0x2d4>)
 8003606:	fba3 2302 	umull	r2, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	011c      	lsls	r4, r3, #4
 800360e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003612:	2200      	movs	r2, #0
 8003614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003618:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800361c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003620:	4642      	mov	r2, r8
 8003622:	464b      	mov	r3, r9
 8003624:	1891      	adds	r1, r2, r2
 8003626:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003628:	415b      	adcs	r3, r3
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003630:	4641      	mov	r1, r8
 8003632:	eb12 0a01 	adds.w	sl, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb43 0b01 	adc.w	fp, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800364c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003650:	4692      	mov	sl, r2
 8003652:	469b      	mov	fp, r3
 8003654:	4643      	mov	r3, r8
 8003656:	eb1a 0303 	adds.w	r3, sl, r3
 800365a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800365e:	464b      	mov	r3, r9
 8003660:	eb4b 0303 	adc.w	r3, fp, r3
 8003664:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003674:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800367c:	460b      	mov	r3, r1
 800367e:	18db      	adds	r3, r3, r3
 8003680:	643b      	str	r3, [r7, #64]	@ 0x40
 8003682:	4613      	mov	r3, r2
 8003684:	eb42 0303 	adc.w	r3, r2, r3
 8003688:	647b      	str	r3, [r7, #68]	@ 0x44
 800368a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800368e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003692:	f7fc fe05 	bl	80002a0 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4611      	mov	r1, r2
 800369c:	4b3b      	ldr	r3, [pc, #236]	@ (800378c <UART_SetConfig+0x2d4>)
 800369e:	fba3 2301 	umull	r2, r3, r3, r1
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2264      	movs	r2, #100	@ 0x64
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	1acb      	subs	r3, r1, r3
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036b2:	4b36      	ldr	r3, [pc, #216]	@ (800378c <UART_SetConfig+0x2d4>)
 80036b4:	fba3 2302 	umull	r2, r3, r3, r2
 80036b8:	095b      	lsrs	r3, r3, #5
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036c0:	441c      	add	r4, r3
 80036c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80036d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80036d4:	4642      	mov	r2, r8
 80036d6:	464b      	mov	r3, r9
 80036d8:	1891      	adds	r1, r2, r2
 80036da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036dc:	415b      	adcs	r3, r3
 80036de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036e4:	4641      	mov	r1, r8
 80036e6:	1851      	adds	r1, r2, r1
 80036e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80036ea:	4649      	mov	r1, r9
 80036ec:	414b      	adcs	r3, r1
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036fc:	4659      	mov	r1, fp
 80036fe:	00cb      	lsls	r3, r1, #3
 8003700:	4651      	mov	r1, sl
 8003702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003706:	4651      	mov	r1, sl
 8003708:	00ca      	lsls	r2, r1, #3
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	4603      	mov	r3, r0
 8003710:	4642      	mov	r2, r8
 8003712:	189b      	adds	r3, r3, r2
 8003714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003718:	464b      	mov	r3, r9
 800371a:	460a      	mov	r2, r1
 800371c:	eb42 0303 	adc.w	r3, r2, r3
 8003720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003730:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003738:	460b      	mov	r3, r1
 800373a:	18db      	adds	r3, r3, r3
 800373c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800373e:	4613      	mov	r3, r2
 8003740:	eb42 0303 	adc.w	r3, r2, r3
 8003744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800374a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800374e:	f7fc fda7 	bl	80002a0 <__aeabi_uldivmod>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <UART_SetConfig+0x2d4>)
 8003758:	fba3 1302 	umull	r1, r3, r3, r2
 800375c:	095b      	lsrs	r3, r3, #5
 800375e:	2164      	movs	r1, #100	@ 0x64
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	3332      	adds	r3, #50	@ 0x32
 800376a:	4a08      	ldr	r2, [pc, #32]	@ (800378c <UART_SetConfig+0x2d4>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	f003 0207 	and.w	r2, r3, #7
 8003776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4422      	add	r2, r4
 800377e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003780:	e106      	b.n	8003990 <UART_SetConfig+0x4d8>
 8003782:	bf00      	nop
 8003784:	40011000 	.word	0x40011000
 8003788:	40011400 	.word	0x40011400
 800378c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003794:	2200      	movs	r2, #0
 8003796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800379a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800379e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037a2:	4642      	mov	r2, r8
 80037a4:	464b      	mov	r3, r9
 80037a6:	1891      	adds	r1, r2, r2
 80037a8:	6239      	str	r1, [r7, #32]
 80037aa:	415b      	adcs	r3, r3
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037b2:	4641      	mov	r1, r8
 80037b4:	1854      	adds	r4, r2, r1
 80037b6:	4649      	mov	r1, r9
 80037b8:	eb43 0501 	adc.w	r5, r3, r1
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	00eb      	lsls	r3, r5, #3
 80037c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ca:	00e2      	lsls	r2, r4, #3
 80037cc:	4614      	mov	r4, r2
 80037ce:	461d      	mov	r5, r3
 80037d0:	4643      	mov	r3, r8
 80037d2:	18e3      	adds	r3, r4, r3
 80037d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037d8:	464b      	mov	r3, r9
 80037da:	eb45 0303 	adc.w	r3, r5, r3
 80037de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037f2:	f04f 0200 	mov.w	r2, #0
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037fe:	4629      	mov	r1, r5
 8003800:	008b      	lsls	r3, r1, #2
 8003802:	4621      	mov	r1, r4
 8003804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003808:	4621      	mov	r1, r4
 800380a:	008a      	lsls	r2, r1, #2
 800380c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003810:	f7fc fd46 	bl	80002a0 <__aeabi_uldivmod>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4b60      	ldr	r3, [pc, #384]	@ (800399c <UART_SetConfig+0x4e4>)
 800381a:	fba3 2302 	umull	r2, r3, r3, r2
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	011c      	lsls	r4, r3, #4
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800382c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003834:	4642      	mov	r2, r8
 8003836:	464b      	mov	r3, r9
 8003838:	1891      	adds	r1, r2, r2
 800383a:	61b9      	str	r1, [r7, #24]
 800383c:	415b      	adcs	r3, r3
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003844:	4641      	mov	r1, r8
 8003846:	1851      	adds	r1, r2, r1
 8003848:	6139      	str	r1, [r7, #16]
 800384a:	4649      	mov	r1, r9
 800384c:	414b      	adcs	r3, r1
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800385c:	4659      	mov	r1, fp
 800385e:	00cb      	lsls	r3, r1, #3
 8003860:	4651      	mov	r1, sl
 8003862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003866:	4651      	mov	r1, sl
 8003868:	00ca      	lsls	r2, r1, #3
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	4603      	mov	r3, r0
 8003870:	4642      	mov	r2, r8
 8003872:	189b      	adds	r3, r3, r2
 8003874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003878:	464b      	mov	r3, r9
 800387a:	460a      	mov	r2, r1
 800387c:	eb42 0303 	adc.w	r3, r2, r3
 8003880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800388e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800389c:	4649      	mov	r1, r9
 800389e:	008b      	lsls	r3, r1, #2
 80038a0:	4641      	mov	r1, r8
 80038a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a6:	4641      	mov	r1, r8
 80038a8:	008a      	lsls	r2, r1, #2
 80038aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038ae:	f7fc fcf7 	bl	80002a0 <__aeabi_uldivmod>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4611      	mov	r1, r2
 80038b8:	4b38      	ldr	r3, [pc, #224]	@ (800399c <UART_SetConfig+0x4e4>)
 80038ba:	fba3 2301 	umull	r2, r3, r3, r1
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	2264      	movs	r2, #100	@ 0x64
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	1acb      	subs	r3, r1, r3
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	3332      	adds	r3, #50	@ 0x32
 80038cc:	4a33      	ldr	r2, [pc, #204]	@ (800399c <UART_SetConfig+0x4e4>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038d8:	441c      	add	r4, r3
 80038da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038de:	2200      	movs	r2, #0
 80038e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80038e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80038e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038e8:	4642      	mov	r2, r8
 80038ea:	464b      	mov	r3, r9
 80038ec:	1891      	adds	r1, r2, r2
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	415b      	adcs	r3, r3
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038f8:	4641      	mov	r1, r8
 80038fa:	1851      	adds	r1, r2, r1
 80038fc:	6039      	str	r1, [r7, #0]
 80038fe:	4649      	mov	r1, r9
 8003900:	414b      	adcs	r3, r1
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003910:	4659      	mov	r1, fp
 8003912:	00cb      	lsls	r3, r1, #3
 8003914:	4651      	mov	r1, sl
 8003916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800391a:	4651      	mov	r1, sl
 800391c:	00ca      	lsls	r2, r1, #3
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	4603      	mov	r3, r0
 8003924:	4642      	mov	r2, r8
 8003926:	189b      	adds	r3, r3, r2
 8003928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800392a:	464b      	mov	r3, r9
 800392c:	460a      	mov	r2, r1
 800392e:	eb42 0303 	adc.w	r3, r2, r3
 8003932:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	663b      	str	r3, [r7, #96]	@ 0x60
 800393e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800394c:	4649      	mov	r1, r9
 800394e:	008b      	lsls	r3, r1, #2
 8003950:	4641      	mov	r1, r8
 8003952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003956:	4641      	mov	r1, r8
 8003958:	008a      	lsls	r2, r1, #2
 800395a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800395e:	f7fc fc9f 	bl	80002a0 <__aeabi_uldivmod>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	4b0d      	ldr	r3, [pc, #52]	@ (800399c <UART_SetConfig+0x4e4>)
 8003968:	fba3 1302 	umull	r1, r3, r3, r2
 800396c:	095b      	lsrs	r3, r3, #5
 800396e:	2164      	movs	r1, #100	@ 0x64
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	3332      	adds	r3, #50	@ 0x32
 800397a:	4a08      	ldr	r2, [pc, #32]	@ (800399c <UART_SetConfig+0x4e4>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	f003 020f 	and.w	r2, r3, #15
 8003986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4422      	add	r2, r4
 800398e:	609a      	str	r2, [r3, #8]
}
 8003990:	bf00      	nop
 8003992:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003996:	46bd      	mov	sp, r7
 8003998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399c:	51eb851f 	.word	0x51eb851f

080039a0 <siscanf>:
 80039a0:	b40e      	push	{r1, r2, r3}
 80039a2:	b530      	push	{r4, r5, lr}
 80039a4:	b09c      	sub	sp, #112	@ 0x70
 80039a6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80039a8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80039ac:	f854 5b04 	ldr.w	r5, [r4], #4
 80039b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80039b4:	9002      	str	r0, [sp, #8]
 80039b6:	9006      	str	r0, [sp, #24]
 80039b8:	f7fc fc14 	bl	80001e4 <strlen>
 80039bc:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <siscanf+0x4c>)
 80039be:	9003      	str	r0, [sp, #12]
 80039c0:	9007      	str	r0, [sp, #28]
 80039c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80039c4:	480a      	ldr	r0, [pc, #40]	@ (80039f0 <siscanf+0x50>)
 80039c6:	9401      	str	r4, [sp, #4]
 80039c8:	2300      	movs	r3, #0
 80039ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80039cc:	9314      	str	r3, [sp, #80]	@ 0x50
 80039ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80039d6:	462a      	mov	r2, r5
 80039d8:	4623      	mov	r3, r4
 80039da:	a902      	add	r1, sp, #8
 80039dc:	6800      	ldr	r0, [r0, #0]
 80039de:	f000 fb21 	bl	8004024 <__ssvfiscanf_r>
 80039e2:	b01c      	add	sp, #112	@ 0x70
 80039e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039e8:	b003      	add	sp, #12
 80039ea:	4770      	bx	lr
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	2000000c 	.word	0x2000000c

080039f4 <__seofread>:
 80039f4:	2000      	movs	r0, #0
 80039f6:	4770      	bx	lr

080039f8 <_vsniprintf_r>:
 80039f8:	b530      	push	{r4, r5, lr}
 80039fa:	4614      	mov	r4, r2
 80039fc:	2c00      	cmp	r4, #0
 80039fe:	b09b      	sub	sp, #108	@ 0x6c
 8003a00:	4605      	mov	r5, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	da05      	bge.n	8003a12 <_vsniprintf_r+0x1a>
 8003a06:	238b      	movs	r3, #139	@ 0x8b
 8003a08:	6003      	str	r3, [r0, #0]
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0e:	b01b      	add	sp, #108	@ 0x6c
 8003a10:	bd30      	pop	{r4, r5, pc}
 8003a12:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a16:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003a1a:	bf14      	ite	ne
 8003a1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a20:	4623      	moveq	r3, r4
 8003a22:	9302      	str	r3, [sp, #8]
 8003a24:	9305      	str	r3, [sp, #20]
 8003a26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a2a:	9100      	str	r1, [sp, #0]
 8003a2c:	9104      	str	r1, [sp, #16]
 8003a2e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003a32:	4669      	mov	r1, sp
 8003a34:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003a36:	f000 f9a1 	bl	8003d7c <_svfiprintf_r>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	bfbc      	itt	lt
 8003a3e:	238b      	movlt	r3, #139	@ 0x8b
 8003a40:	602b      	strlt	r3, [r5, #0]
 8003a42:	2c00      	cmp	r4, #0
 8003a44:	d0e3      	beq.n	8003a0e <_vsniprintf_r+0x16>
 8003a46:	9b00      	ldr	r3, [sp, #0]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e7df      	b.n	8003a0e <_vsniprintf_r+0x16>
	...

08003a50 <vsniprintf>:
 8003a50:	b507      	push	{r0, r1, r2, lr}
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	4613      	mov	r3, r2
 8003a56:	460a      	mov	r2, r1
 8003a58:	4601      	mov	r1, r0
 8003a5a:	4803      	ldr	r0, [pc, #12]	@ (8003a68 <vsniprintf+0x18>)
 8003a5c:	6800      	ldr	r0, [r0, #0]
 8003a5e:	f7ff ffcb 	bl	80039f8 <_vsniprintf_r>
 8003a62:	b003      	add	sp, #12
 8003a64:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a68:	2000000c 	.word	0x2000000c

08003a6c <memset>:
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d100      	bne.n	8003a76 <memset+0xa>
 8003a74:	4770      	bx	lr
 8003a76:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7a:	e7f9      	b.n	8003a70 <memset+0x4>

08003a7c <__errno>:
 8003a7c:	4b01      	ldr	r3, [pc, #4]	@ (8003a84 <__errno+0x8>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	2000000c 	.word	0x2000000c

08003a88 <__libc_init_array>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ac0 <__libc_init_array+0x38>)
 8003a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003ac4 <__libc_init_array+0x3c>)
 8003a8e:	1b64      	subs	r4, r4, r5
 8003a90:	10a4      	asrs	r4, r4, #2
 8003a92:	2600      	movs	r6, #0
 8003a94:	42a6      	cmp	r6, r4
 8003a96:	d109      	bne.n	8003aac <__libc_init_array+0x24>
 8003a98:	4d0b      	ldr	r5, [pc, #44]	@ (8003ac8 <__libc_init_array+0x40>)
 8003a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003acc <__libc_init_array+0x44>)
 8003a9c:	f001 f8e0 	bl	8004c60 <_init>
 8003aa0:	1b64      	subs	r4, r4, r5
 8003aa2:	10a4      	asrs	r4, r4, #2
 8003aa4:	2600      	movs	r6, #0
 8003aa6:	42a6      	cmp	r6, r4
 8003aa8:	d105      	bne.n	8003ab6 <__libc_init_array+0x2e>
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab0:	4798      	blx	r3
 8003ab2:	3601      	adds	r6, #1
 8003ab4:	e7ee      	b.n	8003a94 <__libc_init_array+0xc>
 8003ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aba:	4798      	blx	r3
 8003abc:	3601      	adds	r6, #1
 8003abe:	e7f2      	b.n	8003aa6 <__libc_init_array+0x1e>
 8003ac0:	08004e9c 	.word	0x08004e9c
 8003ac4:	08004e9c 	.word	0x08004e9c
 8003ac8:	08004e9c 	.word	0x08004e9c
 8003acc:	08004ea0 	.word	0x08004ea0

08003ad0 <__retarget_lock_acquire_recursive>:
 8003ad0:	4770      	bx	lr

08003ad2 <__retarget_lock_release_recursive>:
 8003ad2:	4770      	bx	lr

08003ad4 <_free_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	d041      	beq.n	8003b60 <_free_r+0x8c>
 8003adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae0:	1f0c      	subs	r4, r1, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bfb8      	it	lt
 8003ae6:	18e4      	addlt	r4, r4, r3
 8003ae8:	f000 f8e0 	bl	8003cac <__malloc_lock>
 8003aec:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <_free_r+0x90>)
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	b933      	cbnz	r3, 8003b00 <_free_r+0x2c>
 8003af2:	6063      	str	r3, [r4, #4]
 8003af4:	6014      	str	r4, [r2, #0]
 8003af6:	4628      	mov	r0, r5
 8003af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003afc:	f000 b8dc 	b.w	8003cb8 <__malloc_unlock>
 8003b00:	42a3      	cmp	r3, r4
 8003b02:	d908      	bls.n	8003b16 <_free_r+0x42>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	1821      	adds	r1, r4, r0
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	bf01      	itttt	eq
 8003b0c:	6819      	ldreq	r1, [r3, #0]
 8003b0e:	685b      	ldreq	r3, [r3, #4]
 8003b10:	1809      	addeq	r1, r1, r0
 8003b12:	6021      	streq	r1, [r4, #0]
 8003b14:	e7ed      	b.n	8003af2 <_free_r+0x1e>
 8003b16:	461a      	mov	r2, r3
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	b10b      	cbz	r3, 8003b20 <_free_r+0x4c>
 8003b1c:	42a3      	cmp	r3, r4
 8003b1e:	d9fa      	bls.n	8003b16 <_free_r+0x42>
 8003b20:	6811      	ldr	r1, [r2, #0]
 8003b22:	1850      	adds	r0, r2, r1
 8003b24:	42a0      	cmp	r0, r4
 8003b26:	d10b      	bne.n	8003b40 <_free_r+0x6c>
 8003b28:	6820      	ldr	r0, [r4, #0]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	1850      	adds	r0, r2, r1
 8003b2e:	4283      	cmp	r3, r0
 8003b30:	6011      	str	r1, [r2, #0]
 8003b32:	d1e0      	bne.n	8003af6 <_free_r+0x22>
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	4408      	add	r0, r1
 8003b3c:	6010      	str	r0, [r2, #0]
 8003b3e:	e7da      	b.n	8003af6 <_free_r+0x22>
 8003b40:	d902      	bls.n	8003b48 <_free_r+0x74>
 8003b42:	230c      	movs	r3, #12
 8003b44:	602b      	str	r3, [r5, #0]
 8003b46:	e7d6      	b.n	8003af6 <_free_r+0x22>
 8003b48:	6820      	ldr	r0, [r4, #0]
 8003b4a:	1821      	adds	r1, r4, r0
 8003b4c:	428b      	cmp	r3, r1
 8003b4e:	bf04      	itt	eq
 8003b50:	6819      	ldreq	r1, [r3, #0]
 8003b52:	685b      	ldreq	r3, [r3, #4]
 8003b54:	6063      	str	r3, [r4, #4]
 8003b56:	bf04      	itt	eq
 8003b58:	1809      	addeq	r1, r1, r0
 8003b5a:	6021      	streq	r1, [r4, #0]
 8003b5c:	6054      	str	r4, [r2, #4]
 8003b5e:	e7ca      	b.n	8003af6 <_free_r+0x22>
 8003b60:	bd38      	pop	{r3, r4, r5, pc}
 8003b62:	bf00      	nop
 8003b64:	200002f8 	.word	0x200002f8

08003b68 <sbrk_aligned>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ba8 <sbrk_aligned+0x40>)
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	6831      	ldr	r1, [r6, #0]
 8003b70:	4605      	mov	r5, r0
 8003b72:	b911      	cbnz	r1, 8003b7a <sbrk_aligned+0x12>
 8003b74:	f000 ff34 	bl	80049e0 <_sbrk_r>
 8003b78:	6030      	str	r0, [r6, #0]
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f000 ff2f 	bl	80049e0 <_sbrk_r>
 8003b82:	1c43      	adds	r3, r0, #1
 8003b84:	d103      	bne.n	8003b8e <sbrk_aligned+0x26>
 8003b86:	f04f 34ff 	mov.w	r4, #4294967295
 8003b8a:	4620      	mov	r0, r4
 8003b8c:	bd70      	pop	{r4, r5, r6, pc}
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d0f8      	beq.n	8003b8a <sbrk_aligned+0x22>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 ff20 	bl	80049e0 <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d1f2      	bne.n	8003b8a <sbrk_aligned+0x22>
 8003ba4:	e7ef      	b.n	8003b86 <sbrk_aligned+0x1e>
 8003ba6:	bf00      	nop
 8003ba8:	200002f4 	.word	0x200002f4

08003bac <_malloc_r>:
 8003bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	1ccd      	adds	r5, r1, #3
 8003bb2:	f025 0503 	bic.w	r5, r5, #3
 8003bb6:	3508      	adds	r5, #8
 8003bb8:	2d0c      	cmp	r5, #12
 8003bba:	bf38      	it	cc
 8003bbc:	250c      	movcc	r5, #12
 8003bbe:	2d00      	cmp	r5, #0
 8003bc0:	4606      	mov	r6, r0
 8003bc2:	db01      	blt.n	8003bc8 <_malloc_r+0x1c>
 8003bc4:	42a9      	cmp	r1, r5
 8003bc6:	d904      	bls.n	8003bd2 <_malloc_r+0x26>
 8003bc8:	230c      	movs	r3, #12
 8003bca:	6033      	str	r3, [r6, #0]
 8003bcc:	2000      	movs	r0, #0
 8003bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ca8 <_malloc_r+0xfc>
 8003bd6:	f000 f869 	bl	8003cac <__malloc_lock>
 8003bda:	f8d8 3000 	ldr.w	r3, [r8]
 8003bde:	461c      	mov	r4, r3
 8003be0:	bb44      	cbnz	r4, 8003c34 <_malloc_r+0x88>
 8003be2:	4629      	mov	r1, r5
 8003be4:	4630      	mov	r0, r6
 8003be6:	f7ff ffbf 	bl	8003b68 <sbrk_aligned>
 8003bea:	1c43      	adds	r3, r0, #1
 8003bec:	4604      	mov	r4, r0
 8003bee:	d158      	bne.n	8003ca2 <_malloc_r+0xf6>
 8003bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8003bf4:	4627      	mov	r7, r4
 8003bf6:	2f00      	cmp	r7, #0
 8003bf8:	d143      	bne.n	8003c82 <_malloc_r+0xd6>
 8003bfa:	2c00      	cmp	r4, #0
 8003bfc:	d04b      	beq.n	8003c96 <_malloc_r+0xea>
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	4639      	mov	r1, r7
 8003c02:	4630      	mov	r0, r6
 8003c04:	eb04 0903 	add.w	r9, r4, r3
 8003c08:	f000 feea 	bl	80049e0 <_sbrk_r>
 8003c0c:	4581      	cmp	r9, r0
 8003c0e:	d142      	bne.n	8003c96 <_malloc_r+0xea>
 8003c10:	6821      	ldr	r1, [r4, #0]
 8003c12:	1a6d      	subs	r5, r5, r1
 8003c14:	4629      	mov	r1, r5
 8003c16:	4630      	mov	r0, r6
 8003c18:	f7ff ffa6 	bl	8003b68 <sbrk_aligned>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d03a      	beq.n	8003c96 <_malloc_r+0xea>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	442b      	add	r3, r5
 8003c24:	6023      	str	r3, [r4, #0]
 8003c26:	f8d8 3000 	ldr.w	r3, [r8]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	bb62      	cbnz	r2, 8003c88 <_malloc_r+0xdc>
 8003c2e:	f8c8 7000 	str.w	r7, [r8]
 8003c32:	e00f      	b.n	8003c54 <_malloc_r+0xa8>
 8003c34:	6822      	ldr	r2, [r4, #0]
 8003c36:	1b52      	subs	r2, r2, r5
 8003c38:	d420      	bmi.n	8003c7c <_malloc_r+0xd0>
 8003c3a:	2a0b      	cmp	r2, #11
 8003c3c:	d917      	bls.n	8003c6e <_malloc_r+0xc2>
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	42a3      	cmp	r3, r4
 8003c42:	6025      	str	r5, [r4, #0]
 8003c44:	bf18      	it	ne
 8003c46:	6059      	strne	r1, [r3, #4]
 8003c48:	6863      	ldr	r3, [r4, #4]
 8003c4a:	bf08      	it	eq
 8003c4c:	f8c8 1000 	streq.w	r1, [r8]
 8003c50:	5162      	str	r2, [r4, r5]
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	4630      	mov	r0, r6
 8003c56:	f000 f82f 	bl	8003cb8 <__malloc_unlock>
 8003c5a:	f104 000b 	add.w	r0, r4, #11
 8003c5e:	1d23      	adds	r3, r4, #4
 8003c60:	f020 0007 	bic.w	r0, r0, #7
 8003c64:	1ac2      	subs	r2, r0, r3
 8003c66:	bf1c      	itt	ne
 8003c68:	1a1b      	subne	r3, r3, r0
 8003c6a:	50a3      	strne	r3, [r4, r2]
 8003c6c:	e7af      	b.n	8003bce <_malloc_r+0x22>
 8003c6e:	6862      	ldr	r2, [r4, #4]
 8003c70:	42a3      	cmp	r3, r4
 8003c72:	bf0c      	ite	eq
 8003c74:	f8c8 2000 	streq.w	r2, [r8]
 8003c78:	605a      	strne	r2, [r3, #4]
 8003c7a:	e7eb      	b.n	8003c54 <_malloc_r+0xa8>
 8003c7c:	4623      	mov	r3, r4
 8003c7e:	6864      	ldr	r4, [r4, #4]
 8003c80:	e7ae      	b.n	8003be0 <_malloc_r+0x34>
 8003c82:	463c      	mov	r4, r7
 8003c84:	687f      	ldr	r7, [r7, #4]
 8003c86:	e7b6      	b.n	8003bf6 <_malloc_r+0x4a>
 8003c88:	461a      	mov	r2, r3
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	42a3      	cmp	r3, r4
 8003c8e:	d1fb      	bne.n	8003c88 <_malloc_r+0xdc>
 8003c90:	2300      	movs	r3, #0
 8003c92:	6053      	str	r3, [r2, #4]
 8003c94:	e7de      	b.n	8003c54 <_malloc_r+0xa8>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	f000 f80c 	bl	8003cb8 <__malloc_unlock>
 8003ca0:	e794      	b.n	8003bcc <_malloc_r+0x20>
 8003ca2:	6005      	str	r5, [r0, #0]
 8003ca4:	e7d6      	b.n	8003c54 <_malloc_r+0xa8>
 8003ca6:	bf00      	nop
 8003ca8:	200002f8 	.word	0x200002f8

08003cac <__malloc_lock>:
 8003cac:	4801      	ldr	r0, [pc, #4]	@ (8003cb4 <__malloc_lock+0x8>)
 8003cae:	f7ff bf0f 	b.w	8003ad0 <__retarget_lock_acquire_recursive>
 8003cb2:	bf00      	nop
 8003cb4:	200002f0 	.word	0x200002f0

08003cb8 <__malloc_unlock>:
 8003cb8:	4801      	ldr	r0, [pc, #4]	@ (8003cc0 <__malloc_unlock+0x8>)
 8003cba:	f7ff bf0a 	b.w	8003ad2 <__retarget_lock_release_recursive>
 8003cbe:	bf00      	nop
 8003cc0:	200002f0 	.word	0x200002f0

08003cc4 <__ssputs_r>:
 8003cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc8:	688e      	ldr	r6, [r1, #8]
 8003cca:	461f      	mov	r7, r3
 8003ccc:	42be      	cmp	r6, r7
 8003cce:	680b      	ldr	r3, [r1, #0]
 8003cd0:	4682      	mov	sl, r0
 8003cd2:	460c      	mov	r4, r1
 8003cd4:	4690      	mov	r8, r2
 8003cd6:	d82d      	bhi.n	8003d34 <__ssputs_r+0x70>
 8003cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ce0:	d026      	beq.n	8003d30 <__ssputs_r+0x6c>
 8003ce2:	6965      	ldr	r5, [r4, #20]
 8003ce4:	6909      	ldr	r1, [r1, #16]
 8003ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cea:	eba3 0901 	sub.w	r9, r3, r1
 8003cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cf2:	1c7b      	adds	r3, r7, #1
 8003cf4:	444b      	add	r3, r9
 8003cf6:	106d      	asrs	r5, r5, #1
 8003cf8:	429d      	cmp	r5, r3
 8003cfa:	bf38      	it	cc
 8003cfc:	461d      	movcc	r5, r3
 8003cfe:	0553      	lsls	r3, r2, #21
 8003d00:	d527      	bpl.n	8003d52 <__ssputs_r+0x8e>
 8003d02:	4629      	mov	r1, r5
 8003d04:	f7ff ff52 	bl	8003bac <_malloc_r>
 8003d08:	4606      	mov	r6, r0
 8003d0a:	b360      	cbz	r0, 8003d66 <__ssputs_r+0xa2>
 8003d0c:	6921      	ldr	r1, [r4, #16]
 8003d0e:	464a      	mov	r2, r9
 8003d10:	f000 fe76 	bl	8004a00 <memcpy>
 8003d14:	89a3      	ldrh	r3, [r4, #12]
 8003d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1e:	81a3      	strh	r3, [r4, #12]
 8003d20:	6126      	str	r6, [r4, #16]
 8003d22:	6165      	str	r5, [r4, #20]
 8003d24:	444e      	add	r6, r9
 8003d26:	eba5 0509 	sub.w	r5, r5, r9
 8003d2a:	6026      	str	r6, [r4, #0]
 8003d2c:	60a5      	str	r5, [r4, #8]
 8003d2e:	463e      	mov	r6, r7
 8003d30:	42be      	cmp	r6, r7
 8003d32:	d900      	bls.n	8003d36 <__ssputs_r+0x72>
 8003d34:	463e      	mov	r6, r7
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	4632      	mov	r2, r6
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	f000 fe35 	bl	80049aa <memmove>
 8003d40:	68a3      	ldr	r3, [r4, #8]
 8003d42:	1b9b      	subs	r3, r3, r6
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	4433      	add	r3, r6
 8003d4a:	6023      	str	r3, [r4, #0]
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d52:	462a      	mov	r2, r5
 8003d54:	f000 fe62 	bl	8004a1c <_realloc_r>
 8003d58:	4606      	mov	r6, r0
 8003d5a:	2800      	cmp	r0, #0
 8003d5c:	d1e0      	bne.n	8003d20 <__ssputs_r+0x5c>
 8003d5e:	6921      	ldr	r1, [r4, #16]
 8003d60:	4650      	mov	r0, sl
 8003d62:	f7ff feb7 	bl	8003ad4 <_free_r>
 8003d66:	230c      	movs	r3, #12
 8003d68:	f8ca 3000 	str.w	r3, [sl]
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d72:	81a3      	strh	r3, [r4, #12]
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e7e9      	b.n	8003d4e <__ssputs_r+0x8a>
	...

08003d7c <_svfiprintf_r>:
 8003d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d80:	4698      	mov	r8, r3
 8003d82:	898b      	ldrh	r3, [r1, #12]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	b09d      	sub	sp, #116	@ 0x74
 8003d88:	4607      	mov	r7, r0
 8003d8a:	460d      	mov	r5, r1
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	d510      	bpl.n	8003db2 <_svfiprintf_r+0x36>
 8003d90:	690b      	ldr	r3, [r1, #16]
 8003d92:	b973      	cbnz	r3, 8003db2 <_svfiprintf_r+0x36>
 8003d94:	2140      	movs	r1, #64	@ 0x40
 8003d96:	f7ff ff09 	bl	8003bac <_malloc_r>
 8003d9a:	6028      	str	r0, [r5, #0]
 8003d9c:	6128      	str	r0, [r5, #16]
 8003d9e:	b930      	cbnz	r0, 8003dae <_svfiprintf_r+0x32>
 8003da0:	230c      	movs	r3, #12
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	b01d      	add	sp, #116	@ 0x74
 8003daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dae:	2340      	movs	r3, #64	@ 0x40
 8003db0:	616b      	str	r3, [r5, #20]
 8003db2:	2300      	movs	r3, #0
 8003db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003db6:	2320      	movs	r3, #32
 8003db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003dbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003dc0:	2330      	movs	r3, #48	@ 0x30
 8003dc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f60 <_svfiprintf_r+0x1e4>
 8003dc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003dca:	f04f 0901 	mov.w	r9, #1
 8003dce:	4623      	mov	r3, r4
 8003dd0:	469a      	mov	sl, r3
 8003dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dd6:	b10a      	cbz	r2, 8003ddc <_svfiprintf_r+0x60>
 8003dd8:	2a25      	cmp	r2, #37	@ 0x25
 8003dda:	d1f9      	bne.n	8003dd0 <_svfiprintf_r+0x54>
 8003ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8003de0:	d00b      	beq.n	8003dfa <_svfiprintf_r+0x7e>
 8003de2:	465b      	mov	r3, fp
 8003de4:	4622      	mov	r2, r4
 8003de6:	4629      	mov	r1, r5
 8003de8:	4638      	mov	r0, r7
 8003dea:	f7ff ff6b 	bl	8003cc4 <__ssputs_r>
 8003dee:	3001      	adds	r0, #1
 8003df0:	f000 80a7 	beq.w	8003f42 <_svfiprintf_r+0x1c6>
 8003df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003df6:	445a      	add	r2, fp
 8003df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 809f 	beq.w	8003f42 <_svfiprintf_r+0x1c6>
 8003e04:	2300      	movs	r3, #0
 8003e06:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e0e:	f10a 0a01 	add.w	sl, sl, #1
 8003e12:	9304      	str	r3, [sp, #16]
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e1c:	4654      	mov	r4, sl
 8003e1e:	2205      	movs	r2, #5
 8003e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e24:	484e      	ldr	r0, [pc, #312]	@ (8003f60 <_svfiprintf_r+0x1e4>)
 8003e26:	f7fc f9eb 	bl	8000200 <memchr>
 8003e2a:	9a04      	ldr	r2, [sp, #16]
 8003e2c:	b9d8      	cbnz	r0, 8003e66 <_svfiprintf_r+0xea>
 8003e2e:	06d0      	lsls	r0, r2, #27
 8003e30:	bf44      	itt	mi
 8003e32:	2320      	movmi	r3, #32
 8003e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e38:	0711      	lsls	r1, r2, #28
 8003e3a:	bf44      	itt	mi
 8003e3c:	232b      	movmi	r3, #43	@ 0x2b
 8003e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e42:	f89a 3000 	ldrb.w	r3, [sl]
 8003e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e48:	d015      	beq.n	8003e76 <_svfiprintf_r+0xfa>
 8003e4a:	9a07      	ldr	r2, [sp, #28]
 8003e4c:	4654      	mov	r4, sl
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f04f 0c0a 	mov.w	ip, #10
 8003e54:	4621      	mov	r1, r4
 8003e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e5a:	3b30      	subs	r3, #48	@ 0x30
 8003e5c:	2b09      	cmp	r3, #9
 8003e5e:	d94b      	bls.n	8003ef8 <_svfiprintf_r+0x17c>
 8003e60:	b1b0      	cbz	r0, 8003e90 <_svfiprintf_r+0x114>
 8003e62:	9207      	str	r2, [sp, #28]
 8003e64:	e014      	b.n	8003e90 <_svfiprintf_r+0x114>
 8003e66:	eba0 0308 	sub.w	r3, r0, r8
 8003e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	9304      	str	r3, [sp, #16]
 8003e72:	46a2      	mov	sl, r4
 8003e74:	e7d2      	b.n	8003e1c <_svfiprintf_r+0xa0>
 8003e76:	9b03      	ldr	r3, [sp, #12]
 8003e78:	1d19      	adds	r1, r3, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	9103      	str	r1, [sp, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bfbb      	ittet	lt
 8003e82:	425b      	neglt	r3, r3
 8003e84:	f042 0202 	orrlt.w	r2, r2, #2
 8003e88:	9307      	strge	r3, [sp, #28]
 8003e8a:	9307      	strlt	r3, [sp, #28]
 8003e8c:	bfb8      	it	lt
 8003e8e:	9204      	strlt	r2, [sp, #16]
 8003e90:	7823      	ldrb	r3, [r4, #0]
 8003e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e94:	d10a      	bne.n	8003eac <_svfiprintf_r+0x130>
 8003e96:	7863      	ldrb	r3, [r4, #1]
 8003e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e9a:	d132      	bne.n	8003f02 <_svfiprintf_r+0x186>
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	1d1a      	adds	r2, r3, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	9203      	str	r2, [sp, #12]
 8003ea4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ea8:	3402      	adds	r4, #2
 8003eaa:	9305      	str	r3, [sp, #20]
 8003eac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f70 <_svfiprintf_r+0x1f4>
 8003eb0:	7821      	ldrb	r1, [r4, #0]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	f7fc f9a3 	bl	8000200 <memchr>
 8003eba:	b138      	cbz	r0, 8003ecc <_svfiprintf_r+0x150>
 8003ebc:	9b04      	ldr	r3, [sp, #16]
 8003ebe:	eba0 000a 	sub.w	r0, r0, sl
 8003ec2:	2240      	movs	r2, #64	@ 0x40
 8003ec4:	4082      	lsls	r2, r0
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	3401      	adds	r4, #1
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed0:	4824      	ldr	r0, [pc, #144]	@ (8003f64 <_svfiprintf_r+0x1e8>)
 8003ed2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ed6:	2206      	movs	r2, #6
 8003ed8:	f7fc f992 	bl	8000200 <memchr>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d036      	beq.n	8003f4e <_svfiprintf_r+0x1d2>
 8003ee0:	4b21      	ldr	r3, [pc, #132]	@ (8003f68 <_svfiprintf_r+0x1ec>)
 8003ee2:	bb1b      	cbnz	r3, 8003f2c <_svfiprintf_r+0x1b0>
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	3307      	adds	r3, #7
 8003ee8:	f023 0307 	bic.w	r3, r3, #7
 8003eec:	3308      	adds	r3, #8
 8003eee:	9303      	str	r3, [sp, #12]
 8003ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ef2:	4433      	add	r3, r6
 8003ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ef6:	e76a      	b.n	8003dce <_svfiprintf_r+0x52>
 8003ef8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003efc:	460c      	mov	r4, r1
 8003efe:	2001      	movs	r0, #1
 8003f00:	e7a8      	b.n	8003e54 <_svfiprintf_r+0xd8>
 8003f02:	2300      	movs	r3, #0
 8003f04:	3401      	adds	r4, #1
 8003f06:	9305      	str	r3, [sp, #20]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f04f 0c0a 	mov.w	ip, #10
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f14:	3a30      	subs	r2, #48	@ 0x30
 8003f16:	2a09      	cmp	r2, #9
 8003f18:	d903      	bls.n	8003f22 <_svfiprintf_r+0x1a6>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0c6      	beq.n	8003eac <_svfiprintf_r+0x130>
 8003f1e:	9105      	str	r1, [sp, #20]
 8003f20:	e7c4      	b.n	8003eac <_svfiprintf_r+0x130>
 8003f22:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f26:	4604      	mov	r4, r0
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e7f0      	b.n	8003f0e <_svfiprintf_r+0x192>
 8003f2c:	ab03      	add	r3, sp, #12
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	462a      	mov	r2, r5
 8003f32:	4b0e      	ldr	r3, [pc, #56]	@ (8003f6c <_svfiprintf_r+0x1f0>)
 8003f34:	a904      	add	r1, sp, #16
 8003f36:	4638      	mov	r0, r7
 8003f38:	f3af 8000 	nop.w
 8003f3c:	1c42      	adds	r2, r0, #1
 8003f3e:	4606      	mov	r6, r0
 8003f40:	d1d6      	bne.n	8003ef0 <_svfiprintf_r+0x174>
 8003f42:	89ab      	ldrh	r3, [r5, #12]
 8003f44:	065b      	lsls	r3, r3, #25
 8003f46:	f53f af2d 	bmi.w	8003da4 <_svfiprintf_r+0x28>
 8003f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f4c:	e72c      	b.n	8003da8 <_svfiprintf_r+0x2c>
 8003f4e:	ab03      	add	r3, sp, #12
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	462a      	mov	r2, r5
 8003f54:	4b05      	ldr	r3, [pc, #20]	@ (8003f6c <_svfiprintf_r+0x1f0>)
 8003f56:	a904      	add	r1, sp, #16
 8003f58:	4638      	mov	r0, r7
 8003f5a:	f000 fa45 	bl	80043e8 <_printf_i>
 8003f5e:	e7ed      	b.n	8003f3c <_svfiprintf_r+0x1c0>
 8003f60:	08004d44 	.word	0x08004d44
 8003f64:	08004d4e 	.word	0x08004d4e
 8003f68:	00000000 	.word	0x00000000
 8003f6c:	08003cc5 	.word	0x08003cc5
 8003f70:	08004d4a 	.word	0x08004d4a

08003f74 <_sungetc_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	1c4b      	adds	r3, r1, #1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	d103      	bne.n	8003f84 <_sungetc_r+0x10>
 8003f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003f80:	4628      	mov	r0, r5
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	8993      	ldrh	r3, [r2, #12]
 8003f86:	f023 0320 	bic.w	r3, r3, #32
 8003f8a:	8193      	strh	r3, [r2, #12]
 8003f8c:	6853      	ldr	r3, [r2, #4]
 8003f8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f90:	b2cd      	uxtb	r5, r1
 8003f92:	b18a      	cbz	r2, 8003fb8 <_sungetc_r+0x44>
 8003f94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003f96:	429a      	cmp	r2, r3
 8003f98:	dd08      	ble.n	8003fac <_sungetc_r+0x38>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	1e5a      	subs	r2, r3, #1
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003fa4:	6863      	ldr	r3, [r4, #4]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	e7e9      	b.n	8003f80 <_sungetc_r+0xc>
 8003fac:	4621      	mov	r1, r4
 8003fae:	f000 fcc2 	bl	8004936 <__submore>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d0f1      	beq.n	8003f9a <_sungetc_r+0x26>
 8003fb6:	e7e1      	b.n	8003f7c <_sungetc_r+0x8>
 8003fb8:	6921      	ldr	r1, [r4, #16]
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	b141      	cbz	r1, 8003fd0 <_sungetc_r+0x5c>
 8003fbe:	4291      	cmp	r1, r2
 8003fc0:	d206      	bcs.n	8003fd0 <_sungetc_r+0x5c>
 8003fc2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003fc6:	42a9      	cmp	r1, r5
 8003fc8:	d102      	bne.n	8003fd0 <_sungetc_r+0x5c>
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	6022      	str	r2, [r4, #0]
 8003fce:	e7ea      	b.n	8003fa6 <_sungetc_r+0x32>
 8003fd0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8003fd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fda:	2303      	movs	r3, #3
 8003fdc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003fde:	4623      	mov	r3, r4
 8003fe0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e7de      	b.n	8003fa8 <_sungetc_r+0x34>

08003fea <__ssrefill_r>:
 8003fea:	b510      	push	{r4, lr}
 8003fec:	460c      	mov	r4, r1
 8003fee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003ff0:	b169      	cbz	r1, 800400e <__ssrefill_r+0x24>
 8003ff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ff6:	4299      	cmp	r1, r3
 8003ff8:	d001      	beq.n	8003ffe <__ssrefill_r+0x14>
 8003ffa:	f7ff fd6b 	bl	8003ad4 <_free_r>
 8003ffe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	2000      	movs	r0, #0
 8004004:	6360      	str	r0, [r4, #52]	@ 0x34
 8004006:	b113      	cbz	r3, 800400e <__ssrefill_r+0x24>
 8004008:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	bd10      	pop	{r4, pc}
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	6063      	str	r3, [r4, #4]
 8004016:	89a3      	ldrh	r3, [r4, #12]
 8004018:	f043 0320 	orr.w	r3, r3, #32
 800401c:	81a3      	strh	r3, [r4, #12]
 800401e:	f04f 30ff 	mov.w	r0, #4294967295
 8004022:	e7f3      	b.n	800400c <__ssrefill_r+0x22>

08004024 <__ssvfiscanf_r>:
 8004024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004028:	460c      	mov	r4, r1
 800402a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800402e:	2100      	movs	r1, #0
 8004030:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004034:	49a5      	ldr	r1, [pc, #660]	@ (80042cc <__ssvfiscanf_r+0x2a8>)
 8004036:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004038:	f10d 0804 	add.w	r8, sp, #4
 800403c:	49a4      	ldr	r1, [pc, #656]	@ (80042d0 <__ssvfiscanf_r+0x2ac>)
 800403e:	4fa5      	ldr	r7, [pc, #660]	@ (80042d4 <__ssvfiscanf_r+0x2b0>)
 8004040:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004044:	4606      	mov	r6, r0
 8004046:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	7813      	ldrb	r3, [r2, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8158 	beq.w	8004302 <__ssvfiscanf_r+0x2de>
 8004052:	5cf9      	ldrb	r1, [r7, r3]
 8004054:	f011 0108 	ands.w	r1, r1, #8
 8004058:	f102 0501 	add.w	r5, r2, #1
 800405c:	d019      	beq.n	8004092 <__ssvfiscanf_r+0x6e>
 800405e:	6863      	ldr	r3, [r4, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	dd0f      	ble.n	8004084 <__ssvfiscanf_r+0x60>
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	5cba      	ldrb	r2, [r7, r2]
 800406a:	0712      	lsls	r2, r2, #28
 800406c:	d401      	bmi.n	8004072 <__ssvfiscanf_r+0x4e>
 800406e:	462a      	mov	r2, r5
 8004070:	e7eb      	b.n	800404a <__ssvfiscanf_r+0x26>
 8004072:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004074:	3201      	adds	r2, #1
 8004076:	9245      	str	r2, [sp, #276]	@ 0x114
 8004078:	6862      	ldr	r2, [r4, #4]
 800407a:	3301      	adds	r3, #1
 800407c:	3a01      	subs	r2, #1
 800407e:	6062      	str	r2, [r4, #4]
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	e7ec      	b.n	800405e <__ssvfiscanf_r+0x3a>
 8004084:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004086:	4621      	mov	r1, r4
 8004088:	4630      	mov	r0, r6
 800408a:	4798      	blx	r3
 800408c:	2800      	cmp	r0, #0
 800408e:	d0e9      	beq.n	8004064 <__ssvfiscanf_r+0x40>
 8004090:	e7ed      	b.n	800406e <__ssvfiscanf_r+0x4a>
 8004092:	2b25      	cmp	r3, #37	@ 0x25
 8004094:	d012      	beq.n	80040bc <__ssvfiscanf_r+0x98>
 8004096:	4699      	mov	r9, r3
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f340 8093 	ble.w	80041c6 <__ssvfiscanf_r+0x1a2>
 80040a0:	6822      	ldr	r2, [r4, #0]
 80040a2:	7813      	ldrb	r3, [r2, #0]
 80040a4:	454b      	cmp	r3, r9
 80040a6:	f040 812c 	bne.w	8004302 <__ssvfiscanf_r+0x2de>
 80040aa:	6863      	ldr	r3, [r4, #4]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	6063      	str	r3, [r4, #4]
 80040b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80040b2:	3201      	adds	r2, #1
 80040b4:	3301      	adds	r3, #1
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	9345      	str	r3, [sp, #276]	@ 0x114
 80040ba:	e7d8      	b.n	800406e <__ssvfiscanf_r+0x4a>
 80040bc:	9141      	str	r1, [sp, #260]	@ 0x104
 80040be:	9143      	str	r1, [sp, #268]	@ 0x10c
 80040c0:	7853      	ldrb	r3, [r2, #1]
 80040c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040c4:	bf02      	ittt	eq
 80040c6:	2310      	moveq	r3, #16
 80040c8:	1c95      	addeq	r5, r2, #2
 80040ca:	9341      	streq	r3, [sp, #260]	@ 0x104
 80040cc:	220a      	movs	r2, #10
 80040ce:	46a9      	mov	r9, r5
 80040d0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80040d4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80040d8:	2b09      	cmp	r3, #9
 80040da:	d91e      	bls.n	800411a <__ssvfiscanf_r+0xf6>
 80040dc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80042d8 <__ssvfiscanf_r+0x2b4>
 80040e0:	2203      	movs	r2, #3
 80040e2:	4650      	mov	r0, sl
 80040e4:	f7fc f88c 	bl	8000200 <memchr>
 80040e8:	b138      	cbz	r0, 80040fa <__ssvfiscanf_r+0xd6>
 80040ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80040ec:	eba0 000a 	sub.w	r0, r0, sl
 80040f0:	2301      	movs	r3, #1
 80040f2:	4083      	lsls	r3, r0
 80040f4:	4313      	orrs	r3, r2
 80040f6:	9341      	str	r3, [sp, #260]	@ 0x104
 80040f8:	464d      	mov	r5, r9
 80040fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80040fe:	2b78      	cmp	r3, #120	@ 0x78
 8004100:	d806      	bhi.n	8004110 <__ssvfiscanf_r+0xec>
 8004102:	2b57      	cmp	r3, #87	@ 0x57
 8004104:	d810      	bhi.n	8004128 <__ssvfiscanf_r+0x104>
 8004106:	2b25      	cmp	r3, #37	@ 0x25
 8004108:	d0c5      	beq.n	8004096 <__ssvfiscanf_r+0x72>
 800410a:	d857      	bhi.n	80041bc <__ssvfiscanf_r+0x198>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d065      	beq.n	80041dc <__ssvfiscanf_r+0x1b8>
 8004110:	2303      	movs	r3, #3
 8004112:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004114:	230a      	movs	r3, #10
 8004116:	9342      	str	r3, [sp, #264]	@ 0x108
 8004118:	e078      	b.n	800420c <__ssvfiscanf_r+0x1e8>
 800411a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800411c:	fb02 1103 	mla	r1, r2, r3, r1
 8004120:	3930      	subs	r1, #48	@ 0x30
 8004122:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004124:	464d      	mov	r5, r9
 8004126:	e7d2      	b.n	80040ce <__ssvfiscanf_r+0xaa>
 8004128:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800412c:	2a20      	cmp	r2, #32
 800412e:	d8ef      	bhi.n	8004110 <__ssvfiscanf_r+0xec>
 8004130:	a101      	add	r1, pc, #4	@ (adr r1, 8004138 <__ssvfiscanf_r+0x114>)
 8004132:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004136:	bf00      	nop
 8004138:	080041eb 	.word	0x080041eb
 800413c:	08004111 	.word	0x08004111
 8004140:	08004111 	.word	0x08004111
 8004144:	08004245 	.word	0x08004245
 8004148:	08004111 	.word	0x08004111
 800414c:	08004111 	.word	0x08004111
 8004150:	08004111 	.word	0x08004111
 8004154:	08004111 	.word	0x08004111
 8004158:	08004111 	.word	0x08004111
 800415c:	08004111 	.word	0x08004111
 8004160:	08004111 	.word	0x08004111
 8004164:	0800425b 	.word	0x0800425b
 8004168:	08004241 	.word	0x08004241
 800416c:	080041c3 	.word	0x080041c3
 8004170:	080041c3 	.word	0x080041c3
 8004174:	080041c3 	.word	0x080041c3
 8004178:	08004111 	.word	0x08004111
 800417c:	080041fd 	.word	0x080041fd
 8004180:	08004111 	.word	0x08004111
 8004184:	08004111 	.word	0x08004111
 8004188:	08004111 	.word	0x08004111
 800418c:	08004111 	.word	0x08004111
 8004190:	0800426b 	.word	0x0800426b
 8004194:	08004205 	.word	0x08004205
 8004198:	080041e3 	.word	0x080041e3
 800419c:	08004111 	.word	0x08004111
 80041a0:	08004111 	.word	0x08004111
 80041a4:	08004267 	.word	0x08004267
 80041a8:	08004111 	.word	0x08004111
 80041ac:	08004241 	.word	0x08004241
 80041b0:	08004111 	.word	0x08004111
 80041b4:	08004111 	.word	0x08004111
 80041b8:	080041eb 	.word	0x080041eb
 80041bc:	3b45      	subs	r3, #69	@ 0x45
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d8a6      	bhi.n	8004110 <__ssvfiscanf_r+0xec>
 80041c2:	2305      	movs	r3, #5
 80041c4:	e021      	b.n	800420a <__ssvfiscanf_r+0x1e6>
 80041c6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80041c8:	4621      	mov	r1, r4
 80041ca:	4630      	mov	r0, r6
 80041cc:	4798      	blx	r3
 80041ce:	2800      	cmp	r0, #0
 80041d0:	f43f af66 	beq.w	80040a0 <__ssvfiscanf_r+0x7c>
 80041d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80041d6:	2800      	cmp	r0, #0
 80041d8:	f040 808b 	bne.w	80042f2 <__ssvfiscanf_r+0x2ce>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e08b      	b.n	80042fa <__ssvfiscanf_r+0x2d6>
 80041e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80041e4:	f042 0220 	orr.w	r2, r2, #32
 80041e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80041ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80041ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80041f2:	2210      	movs	r2, #16
 80041f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80041f6:	9242      	str	r2, [sp, #264]	@ 0x108
 80041f8:	d902      	bls.n	8004200 <__ssvfiscanf_r+0x1dc>
 80041fa:	e005      	b.n	8004208 <__ssvfiscanf_r+0x1e4>
 80041fc:	2300      	movs	r3, #0
 80041fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8004200:	2303      	movs	r3, #3
 8004202:	e002      	b.n	800420a <__ssvfiscanf_r+0x1e6>
 8004204:	2308      	movs	r3, #8
 8004206:	9342      	str	r3, [sp, #264]	@ 0x108
 8004208:	2304      	movs	r3, #4
 800420a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800420c:	6863      	ldr	r3, [r4, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	dd39      	ble.n	8004286 <__ssvfiscanf_r+0x262>
 8004212:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004214:	0659      	lsls	r1, r3, #25
 8004216:	d404      	bmi.n	8004222 <__ssvfiscanf_r+0x1fe>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	781a      	ldrb	r2, [r3, #0]
 800421c:	5cba      	ldrb	r2, [r7, r2]
 800421e:	0712      	lsls	r2, r2, #28
 8004220:	d438      	bmi.n	8004294 <__ssvfiscanf_r+0x270>
 8004222:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004224:	2b02      	cmp	r3, #2
 8004226:	dc47      	bgt.n	80042b8 <__ssvfiscanf_r+0x294>
 8004228:	466b      	mov	r3, sp
 800422a:	4622      	mov	r2, r4
 800422c:	a941      	add	r1, sp, #260	@ 0x104
 800422e:	4630      	mov	r0, r6
 8004230:	f000 f9fa 	bl	8004628 <_scanf_chars>
 8004234:	2801      	cmp	r0, #1
 8004236:	d064      	beq.n	8004302 <__ssvfiscanf_r+0x2de>
 8004238:	2802      	cmp	r0, #2
 800423a:	f47f af18 	bne.w	800406e <__ssvfiscanf_r+0x4a>
 800423e:	e7c9      	b.n	80041d4 <__ssvfiscanf_r+0x1b0>
 8004240:	220a      	movs	r2, #10
 8004242:	e7d7      	b.n	80041f4 <__ssvfiscanf_r+0x1d0>
 8004244:	4629      	mov	r1, r5
 8004246:	4640      	mov	r0, r8
 8004248:	f000 fb3c 	bl	80048c4 <__sccl>
 800424c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800424e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004252:	9341      	str	r3, [sp, #260]	@ 0x104
 8004254:	4605      	mov	r5, r0
 8004256:	2301      	movs	r3, #1
 8004258:	e7d7      	b.n	800420a <__ssvfiscanf_r+0x1e6>
 800425a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800425c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004260:	9341      	str	r3, [sp, #260]	@ 0x104
 8004262:	2300      	movs	r3, #0
 8004264:	e7d1      	b.n	800420a <__ssvfiscanf_r+0x1e6>
 8004266:	2302      	movs	r3, #2
 8004268:	e7cf      	b.n	800420a <__ssvfiscanf_r+0x1e6>
 800426a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800426c:	06c3      	lsls	r3, r0, #27
 800426e:	f53f aefe 	bmi.w	800406e <__ssvfiscanf_r+0x4a>
 8004272:	9b00      	ldr	r3, [sp, #0]
 8004274:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004276:	1d19      	adds	r1, r3, #4
 8004278:	9100      	str	r1, [sp, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	07c0      	lsls	r0, r0, #31
 800427e:	bf4c      	ite	mi
 8004280:	801a      	strhmi	r2, [r3, #0]
 8004282:	601a      	strpl	r2, [r3, #0]
 8004284:	e6f3      	b.n	800406e <__ssvfiscanf_r+0x4a>
 8004286:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004288:	4621      	mov	r1, r4
 800428a:	4630      	mov	r0, r6
 800428c:	4798      	blx	r3
 800428e:	2800      	cmp	r0, #0
 8004290:	d0bf      	beq.n	8004212 <__ssvfiscanf_r+0x1ee>
 8004292:	e79f      	b.n	80041d4 <__ssvfiscanf_r+0x1b0>
 8004294:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004296:	3201      	adds	r2, #1
 8004298:	9245      	str	r2, [sp, #276]	@ 0x114
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	3a01      	subs	r2, #1
 800429e:	2a00      	cmp	r2, #0
 80042a0:	6062      	str	r2, [r4, #4]
 80042a2:	dd02      	ble.n	80042aa <__ssvfiscanf_r+0x286>
 80042a4:	3301      	adds	r3, #1
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	e7b6      	b.n	8004218 <__ssvfiscanf_r+0x1f4>
 80042aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80042ac:	4621      	mov	r1, r4
 80042ae:	4630      	mov	r0, r6
 80042b0:	4798      	blx	r3
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d0b0      	beq.n	8004218 <__ssvfiscanf_r+0x1f4>
 80042b6:	e78d      	b.n	80041d4 <__ssvfiscanf_r+0x1b0>
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	dc0f      	bgt.n	80042dc <__ssvfiscanf_r+0x2b8>
 80042bc:	466b      	mov	r3, sp
 80042be:	4622      	mov	r2, r4
 80042c0:	a941      	add	r1, sp, #260	@ 0x104
 80042c2:	4630      	mov	r0, r6
 80042c4:	f000 fa0a 	bl	80046dc <_scanf_i>
 80042c8:	e7b4      	b.n	8004234 <__ssvfiscanf_r+0x210>
 80042ca:	bf00      	nop
 80042cc:	08003f75 	.word	0x08003f75
 80042d0:	08003feb 	.word	0x08003feb
 80042d4:	08004d93 	.word	0x08004d93
 80042d8:	08004d4a 	.word	0x08004d4a
 80042dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004308 <__ssvfiscanf_r+0x2e4>)
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f43f aec5 	beq.w	800406e <__ssvfiscanf_r+0x4a>
 80042e4:	466b      	mov	r3, sp
 80042e6:	4622      	mov	r2, r4
 80042e8:	a941      	add	r1, sp, #260	@ 0x104
 80042ea:	4630      	mov	r0, r6
 80042ec:	f3af 8000 	nop.w
 80042f0:	e7a0      	b.n	8004234 <__ssvfiscanf_r+0x210>
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	065b      	lsls	r3, r3, #25
 80042f6:	f53f af71 	bmi.w	80041dc <__ssvfiscanf_r+0x1b8>
 80042fa:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80042fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004302:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004304:	e7f9      	b.n	80042fa <__ssvfiscanf_r+0x2d6>
 8004306:	bf00      	nop
 8004308:	00000000 	.word	0x00000000

0800430c <_printf_common>:
 800430c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004310:	4616      	mov	r6, r2
 8004312:	4698      	mov	r8, r3
 8004314:	688a      	ldr	r2, [r1, #8]
 8004316:	690b      	ldr	r3, [r1, #16]
 8004318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800431c:	4293      	cmp	r3, r2
 800431e:	bfb8      	it	lt
 8004320:	4613      	movlt	r3, r2
 8004322:	6033      	str	r3, [r6, #0]
 8004324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004328:	4607      	mov	r7, r0
 800432a:	460c      	mov	r4, r1
 800432c:	b10a      	cbz	r2, 8004332 <_printf_common+0x26>
 800432e:	3301      	adds	r3, #1
 8004330:	6033      	str	r3, [r6, #0]
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	0699      	lsls	r1, r3, #26
 8004336:	bf42      	ittt	mi
 8004338:	6833      	ldrmi	r3, [r6, #0]
 800433a:	3302      	addmi	r3, #2
 800433c:	6033      	strmi	r3, [r6, #0]
 800433e:	6825      	ldr	r5, [r4, #0]
 8004340:	f015 0506 	ands.w	r5, r5, #6
 8004344:	d106      	bne.n	8004354 <_printf_common+0x48>
 8004346:	f104 0a19 	add.w	sl, r4, #25
 800434a:	68e3      	ldr	r3, [r4, #12]
 800434c:	6832      	ldr	r2, [r6, #0]
 800434e:	1a9b      	subs	r3, r3, r2
 8004350:	42ab      	cmp	r3, r5
 8004352:	dc26      	bgt.n	80043a2 <_printf_common+0x96>
 8004354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004358:	6822      	ldr	r2, [r4, #0]
 800435a:	3b00      	subs	r3, #0
 800435c:	bf18      	it	ne
 800435e:	2301      	movne	r3, #1
 8004360:	0692      	lsls	r2, r2, #26
 8004362:	d42b      	bmi.n	80043bc <_printf_common+0xb0>
 8004364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004368:	4641      	mov	r1, r8
 800436a:	4638      	mov	r0, r7
 800436c:	47c8      	blx	r9
 800436e:	3001      	adds	r0, #1
 8004370:	d01e      	beq.n	80043b0 <_printf_common+0xa4>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	6922      	ldr	r2, [r4, #16]
 8004376:	f003 0306 	and.w	r3, r3, #6
 800437a:	2b04      	cmp	r3, #4
 800437c:	bf02      	ittt	eq
 800437e:	68e5      	ldreq	r5, [r4, #12]
 8004380:	6833      	ldreq	r3, [r6, #0]
 8004382:	1aed      	subeq	r5, r5, r3
 8004384:	68a3      	ldr	r3, [r4, #8]
 8004386:	bf0c      	ite	eq
 8004388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800438c:	2500      	movne	r5, #0
 800438e:	4293      	cmp	r3, r2
 8004390:	bfc4      	itt	gt
 8004392:	1a9b      	subgt	r3, r3, r2
 8004394:	18ed      	addgt	r5, r5, r3
 8004396:	2600      	movs	r6, #0
 8004398:	341a      	adds	r4, #26
 800439a:	42b5      	cmp	r5, r6
 800439c:	d11a      	bne.n	80043d4 <_printf_common+0xc8>
 800439e:	2000      	movs	r0, #0
 80043a0:	e008      	b.n	80043b4 <_printf_common+0xa8>
 80043a2:	2301      	movs	r3, #1
 80043a4:	4652      	mov	r2, sl
 80043a6:	4641      	mov	r1, r8
 80043a8:	4638      	mov	r0, r7
 80043aa:	47c8      	blx	r9
 80043ac:	3001      	adds	r0, #1
 80043ae:	d103      	bne.n	80043b8 <_printf_common+0xac>
 80043b0:	f04f 30ff 	mov.w	r0, #4294967295
 80043b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b8:	3501      	adds	r5, #1
 80043ba:	e7c6      	b.n	800434a <_printf_common+0x3e>
 80043bc:	18e1      	adds	r1, r4, r3
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	2030      	movs	r0, #48	@ 0x30
 80043c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043c6:	4422      	add	r2, r4
 80043c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043d0:	3302      	adds	r3, #2
 80043d2:	e7c7      	b.n	8004364 <_printf_common+0x58>
 80043d4:	2301      	movs	r3, #1
 80043d6:	4622      	mov	r2, r4
 80043d8:	4641      	mov	r1, r8
 80043da:	4638      	mov	r0, r7
 80043dc:	47c8      	blx	r9
 80043de:	3001      	adds	r0, #1
 80043e0:	d0e6      	beq.n	80043b0 <_printf_common+0xa4>
 80043e2:	3601      	adds	r6, #1
 80043e4:	e7d9      	b.n	800439a <_printf_common+0x8e>
	...

080043e8 <_printf_i>:
 80043e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ec:	7e0f      	ldrb	r7, [r1, #24]
 80043ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043f0:	2f78      	cmp	r7, #120	@ 0x78
 80043f2:	4691      	mov	r9, r2
 80043f4:	4680      	mov	r8, r0
 80043f6:	460c      	mov	r4, r1
 80043f8:	469a      	mov	sl, r3
 80043fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043fe:	d807      	bhi.n	8004410 <_printf_i+0x28>
 8004400:	2f62      	cmp	r7, #98	@ 0x62
 8004402:	d80a      	bhi.n	800441a <_printf_i+0x32>
 8004404:	2f00      	cmp	r7, #0
 8004406:	f000 80d2 	beq.w	80045ae <_printf_i+0x1c6>
 800440a:	2f58      	cmp	r7, #88	@ 0x58
 800440c:	f000 80b9 	beq.w	8004582 <_printf_i+0x19a>
 8004410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004418:	e03a      	b.n	8004490 <_printf_i+0xa8>
 800441a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800441e:	2b15      	cmp	r3, #21
 8004420:	d8f6      	bhi.n	8004410 <_printf_i+0x28>
 8004422:	a101      	add	r1, pc, #4	@ (adr r1, 8004428 <_printf_i+0x40>)
 8004424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004428:	08004481 	.word	0x08004481
 800442c:	08004495 	.word	0x08004495
 8004430:	08004411 	.word	0x08004411
 8004434:	08004411 	.word	0x08004411
 8004438:	08004411 	.word	0x08004411
 800443c:	08004411 	.word	0x08004411
 8004440:	08004495 	.word	0x08004495
 8004444:	08004411 	.word	0x08004411
 8004448:	08004411 	.word	0x08004411
 800444c:	08004411 	.word	0x08004411
 8004450:	08004411 	.word	0x08004411
 8004454:	08004595 	.word	0x08004595
 8004458:	080044bf 	.word	0x080044bf
 800445c:	0800454f 	.word	0x0800454f
 8004460:	08004411 	.word	0x08004411
 8004464:	08004411 	.word	0x08004411
 8004468:	080045b7 	.word	0x080045b7
 800446c:	08004411 	.word	0x08004411
 8004470:	080044bf 	.word	0x080044bf
 8004474:	08004411 	.word	0x08004411
 8004478:	08004411 	.word	0x08004411
 800447c:	08004557 	.word	0x08004557
 8004480:	6833      	ldr	r3, [r6, #0]
 8004482:	1d1a      	adds	r2, r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6032      	str	r2, [r6, #0]
 8004488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800448c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004490:	2301      	movs	r3, #1
 8004492:	e09d      	b.n	80045d0 <_printf_i+0x1e8>
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	6820      	ldr	r0, [r4, #0]
 8004498:	1d19      	adds	r1, r3, #4
 800449a:	6031      	str	r1, [r6, #0]
 800449c:	0606      	lsls	r6, r0, #24
 800449e:	d501      	bpl.n	80044a4 <_printf_i+0xbc>
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	e003      	b.n	80044ac <_printf_i+0xc4>
 80044a4:	0645      	lsls	r5, r0, #25
 80044a6:	d5fb      	bpl.n	80044a0 <_printf_i+0xb8>
 80044a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044ac:	2d00      	cmp	r5, #0
 80044ae:	da03      	bge.n	80044b8 <_printf_i+0xd0>
 80044b0:	232d      	movs	r3, #45	@ 0x2d
 80044b2:	426d      	negs	r5, r5
 80044b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044b8:	4859      	ldr	r0, [pc, #356]	@ (8004620 <_printf_i+0x238>)
 80044ba:	230a      	movs	r3, #10
 80044bc:	e011      	b.n	80044e2 <_printf_i+0xfa>
 80044be:	6821      	ldr	r1, [r4, #0]
 80044c0:	6833      	ldr	r3, [r6, #0]
 80044c2:	0608      	lsls	r0, r1, #24
 80044c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80044c8:	d402      	bmi.n	80044d0 <_printf_i+0xe8>
 80044ca:	0649      	lsls	r1, r1, #25
 80044cc:	bf48      	it	mi
 80044ce:	b2ad      	uxthmi	r5, r5
 80044d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80044d2:	4853      	ldr	r0, [pc, #332]	@ (8004620 <_printf_i+0x238>)
 80044d4:	6033      	str	r3, [r6, #0]
 80044d6:	bf14      	ite	ne
 80044d8:	230a      	movne	r3, #10
 80044da:	2308      	moveq	r3, #8
 80044dc:	2100      	movs	r1, #0
 80044de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044e2:	6866      	ldr	r6, [r4, #4]
 80044e4:	60a6      	str	r6, [r4, #8]
 80044e6:	2e00      	cmp	r6, #0
 80044e8:	bfa2      	ittt	ge
 80044ea:	6821      	ldrge	r1, [r4, #0]
 80044ec:	f021 0104 	bicge.w	r1, r1, #4
 80044f0:	6021      	strge	r1, [r4, #0]
 80044f2:	b90d      	cbnz	r5, 80044f8 <_printf_i+0x110>
 80044f4:	2e00      	cmp	r6, #0
 80044f6:	d04b      	beq.n	8004590 <_printf_i+0x1a8>
 80044f8:	4616      	mov	r6, r2
 80044fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80044fe:	fb03 5711 	mls	r7, r3, r1, r5
 8004502:	5dc7      	ldrb	r7, [r0, r7]
 8004504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004508:	462f      	mov	r7, r5
 800450a:	42bb      	cmp	r3, r7
 800450c:	460d      	mov	r5, r1
 800450e:	d9f4      	bls.n	80044fa <_printf_i+0x112>
 8004510:	2b08      	cmp	r3, #8
 8004512:	d10b      	bne.n	800452c <_printf_i+0x144>
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	07df      	lsls	r7, r3, #31
 8004518:	d508      	bpl.n	800452c <_printf_i+0x144>
 800451a:	6923      	ldr	r3, [r4, #16]
 800451c:	6861      	ldr	r1, [r4, #4]
 800451e:	4299      	cmp	r1, r3
 8004520:	bfde      	ittt	le
 8004522:	2330      	movle	r3, #48	@ 0x30
 8004524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004528:	f106 36ff 	addle.w	r6, r6, #4294967295
 800452c:	1b92      	subs	r2, r2, r6
 800452e:	6122      	str	r2, [r4, #16]
 8004530:	f8cd a000 	str.w	sl, [sp]
 8004534:	464b      	mov	r3, r9
 8004536:	aa03      	add	r2, sp, #12
 8004538:	4621      	mov	r1, r4
 800453a:	4640      	mov	r0, r8
 800453c:	f7ff fee6 	bl	800430c <_printf_common>
 8004540:	3001      	adds	r0, #1
 8004542:	d14a      	bne.n	80045da <_printf_i+0x1f2>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	b004      	add	sp, #16
 800454a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	f043 0320 	orr.w	r3, r3, #32
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	4833      	ldr	r0, [pc, #204]	@ (8004624 <_printf_i+0x23c>)
 8004558:	2778      	movs	r7, #120	@ 0x78
 800455a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	6831      	ldr	r1, [r6, #0]
 8004562:	061f      	lsls	r7, r3, #24
 8004564:	f851 5b04 	ldr.w	r5, [r1], #4
 8004568:	d402      	bmi.n	8004570 <_printf_i+0x188>
 800456a:	065f      	lsls	r7, r3, #25
 800456c:	bf48      	it	mi
 800456e:	b2ad      	uxthmi	r5, r5
 8004570:	6031      	str	r1, [r6, #0]
 8004572:	07d9      	lsls	r1, r3, #31
 8004574:	bf44      	itt	mi
 8004576:	f043 0320 	orrmi.w	r3, r3, #32
 800457a:	6023      	strmi	r3, [r4, #0]
 800457c:	b11d      	cbz	r5, 8004586 <_printf_i+0x19e>
 800457e:	2310      	movs	r3, #16
 8004580:	e7ac      	b.n	80044dc <_printf_i+0xf4>
 8004582:	4827      	ldr	r0, [pc, #156]	@ (8004620 <_printf_i+0x238>)
 8004584:	e7e9      	b.n	800455a <_printf_i+0x172>
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	f023 0320 	bic.w	r3, r3, #32
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	e7f6      	b.n	800457e <_printf_i+0x196>
 8004590:	4616      	mov	r6, r2
 8004592:	e7bd      	b.n	8004510 <_printf_i+0x128>
 8004594:	6833      	ldr	r3, [r6, #0]
 8004596:	6825      	ldr	r5, [r4, #0]
 8004598:	6961      	ldr	r1, [r4, #20]
 800459a:	1d18      	adds	r0, r3, #4
 800459c:	6030      	str	r0, [r6, #0]
 800459e:	062e      	lsls	r6, r5, #24
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	d501      	bpl.n	80045a8 <_printf_i+0x1c0>
 80045a4:	6019      	str	r1, [r3, #0]
 80045a6:	e002      	b.n	80045ae <_printf_i+0x1c6>
 80045a8:	0668      	lsls	r0, r5, #25
 80045aa:	d5fb      	bpl.n	80045a4 <_printf_i+0x1bc>
 80045ac:	8019      	strh	r1, [r3, #0]
 80045ae:	2300      	movs	r3, #0
 80045b0:	6123      	str	r3, [r4, #16]
 80045b2:	4616      	mov	r6, r2
 80045b4:	e7bc      	b.n	8004530 <_printf_i+0x148>
 80045b6:	6833      	ldr	r3, [r6, #0]
 80045b8:	1d1a      	adds	r2, r3, #4
 80045ba:	6032      	str	r2, [r6, #0]
 80045bc:	681e      	ldr	r6, [r3, #0]
 80045be:	6862      	ldr	r2, [r4, #4]
 80045c0:	2100      	movs	r1, #0
 80045c2:	4630      	mov	r0, r6
 80045c4:	f7fb fe1c 	bl	8000200 <memchr>
 80045c8:	b108      	cbz	r0, 80045ce <_printf_i+0x1e6>
 80045ca:	1b80      	subs	r0, r0, r6
 80045cc:	6060      	str	r0, [r4, #4]
 80045ce:	6863      	ldr	r3, [r4, #4]
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	2300      	movs	r3, #0
 80045d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045d8:	e7aa      	b.n	8004530 <_printf_i+0x148>
 80045da:	6923      	ldr	r3, [r4, #16]
 80045dc:	4632      	mov	r2, r6
 80045de:	4649      	mov	r1, r9
 80045e0:	4640      	mov	r0, r8
 80045e2:	47d0      	blx	sl
 80045e4:	3001      	adds	r0, #1
 80045e6:	d0ad      	beq.n	8004544 <_printf_i+0x15c>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	079b      	lsls	r3, r3, #30
 80045ec:	d413      	bmi.n	8004616 <_printf_i+0x22e>
 80045ee:	68e0      	ldr	r0, [r4, #12]
 80045f0:	9b03      	ldr	r3, [sp, #12]
 80045f2:	4298      	cmp	r0, r3
 80045f4:	bfb8      	it	lt
 80045f6:	4618      	movlt	r0, r3
 80045f8:	e7a6      	b.n	8004548 <_printf_i+0x160>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4632      	mov	r2, r6
 80045fe:	4649      	mov	r1, r9
 8004600:	4640      	mov	r0, r8
 8004602:	47d0      	blx	sl
 8004604:	3001      	adds	r0, #1
 8004606:	d09d      	beq.n	8004544 <_printf_i+0x15c>
 8004608:	3501      	adds	r5, #1
 800460a:	68e3      	ldr	r3, [r4, #12]
 800460c:	9903      	ldr	r1, [sp, #12]
 800460e:	1a5b      	subs	r3, r3, r1
 8004610:	42ab      	cmp	r3, r5
 8004612:	dcf2      	bgt.n	80045fa <_printf_i+0x212>
 8004614:	e7eb      	b.n	80045ee <_printf_i+0x206>
 8004616:	2500      	movs	r5, #0
 8004618:	f104 0619 	add.w	r6, r4, #25
 800461c:	e7f5      	b.n	800460a <_printf_i+0x222>
 800461e:	bf00      	nop
 8004620:	08004d55 	.word	0x08004d55
 8004624:	08004d66 	.word	0x08004d66

08004628 <_scanf_chars>:
 8004628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800462c:	4615      	mov	r5, r2
 800462e:	688a      	ldr	r2, [r1, #8]
 8004630:	4680      	mov	r8, r0
 8004632:	460c      	mov	r4, r1
 8004634:	b932      	cbnz	r2, 8004644 <_scanf_chars+0x1c>
 8004636:	698a      	ldr	r2, [r1, #24]
 8004638:	2a00      	cmp	r2, #0
 800463a:	bf14      	ite	ne
 800463c:	f04f 32ff 	movne.w	r2, #4294967295
 8004640:	2201      	moveq	r2, #1
 8004642:	608a      	str	r2, [r1, #8]
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80046d8 <_scanf_chars+0xb0>
 800464a:	06d1      	lsls	r1, r2, #27
 800464c:	bf5f      	itttt	pl
 800464e:	681a      	ldrpl	r2, [r3, #0]
 8004650:	1d11      	addpl	r1, r2, #4
 8004652:	6019      	strpl	r1, [r3, #0]
 8004654:	6816      	ldrpl	r6, [r2, #0]
 8004656:	2700      	movs	r7, #0
 8004658:	69a0      	ldr	r0, [r4, #24]
 800465a:	b188      	cbz	r0, 8004680 <_scanf_chars+0x58>
 800465c:	2801      	cmp	r0, #1
 800465e:	d107      	bne.n	8004670 <_scanf_chars+0x48>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	6963      	ldr	r3, [r4, #20]
 8004666:	5c9b      	ldrb	r3, [r3, r2]
 8004668:	b953      	cbnz	r3, 8004680 <_scanf_chars+0x58>
 800466a:	2f00      	cmp	r7, #0
 800466c:	d031      	beq.n	80046d2 <_scanf_chars+0xaa>
 800466e:	e022      	b.n	80046b6 <_scanf_chars+0x8e>
 8004670:	2802      	cmp	r0, #2
 8004672:	d120      	bne.n	80046b6 <_scanf_chars+0x8e>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	f819 3003 	ldrb.w	r3, [r9, r3]
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	d41a      	bmi.n	80046b6 <_scanf_chars+0x8e>
 8004680:	6823      	ldr	r3, [r4, #0]
 8004682:	06da      	lsls	r2, r3, #27
 8004684:	bf5e      	ittt	pl
 8004686:	682b      	ldrpl	r3, [r5, #0]
 8004688:	781b      	ldrbpl	r3, [r3, #0]
 800468a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800468e:	682a      	ldr	r2, [r5, #0]
 8004690:	686b      	ldr	r3, [r5, #4]
 8004692:	3201      	adds	r2, #1
 8004694:	602a      	str	r2, [r5, #0]
 8004696:	68a2      	ldr	r2, [r4, #8]
 8004698:	3b01      	subs	r3, #1
 800469a:	3a01      	subs	r2, #1
 800469c:	606b      	str	r3, [r5, #4]
 800469e:	3701      	adds	r7, #1
 80046a0:	60a2      	str	r2, [r4, #8]
 80046a2:	b142      	cbz	r2, 80046b6 <_scanf_chars+0x8e>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	dcd7      	bgt.n	8004658 <_scanf_chars+0x30>
 80046a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80046ac:	4629      	mov	r1, r5
 80046ae:	4640      	mov	r0, r8
 80046b0:	4798      	blx	r3
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d0d0      	beq.n	8004658 <_scanf_chars+0x30>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	f013 0310 	ands.w	r3, r3, #16
 80046bc:	d105      	bne.n	80046ca <_scanf_chars+0xa2>
 80046be:	68e2      	ldr	r2, [r4, #12]
 80046c0:	3201      	adds	r2, #1
 80046c2:	60e2      	str	r2, [r4, #12]
 80046c4:	69a2      	ldr	r2, [r4, #24]
 80046c6:	b102      	cbz	r2, 80046ca <_scanf_chars+0xa2>
 80046c8:	7033      	strb	r3, [r6, #0]
 80046ca:	6923      	ldr	r3, [r4, #16]
 80046cc:	443b      	add	r3, r7
 80046ce:	6123      	str	r3, [r4, #16]
 80046d0:	2000      	movs	r0, #0
 80046d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046d6:	bf00      	nop
 80046d8:	08004d93 	.word	0x08004d93

080046dc <_scanf_i>:
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	4698      	mov	r8, r3
 80046e2:	4b74      	ldr	r3, [pc, #464]	@ (80048b4 <_scanf_i+0x1d8>)
 80046e4:	460c      	mov	r4, r1
 80046e6:	4682      	mov	sl, r0
 80046e8:	4616      	mov	r6, r2
 80046ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046ee:	b087      	sub	sp, #28
 80046f0:	ab03      	add	r3, sp, #12
 80046f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80046f6:	4b70      	ldr	r3, [pc, #448]	@ (80048b8 <_scanf_i+0x1dc>)
 80046f8:	69a1      	ldr	r1, [r4, #24]
 80046fa:	4a70      	ldr	r2, [pc, #448]	@ (80048bc <_scanf_i+0x1e0>)
 80046fc:	2903      	cmp	r1, #3
 80046fe:	bf08      	it	eq
 8004700:	461a      	moveq	r2, r3
 8004702:	68a3      	ldr	r3, [r4, #8]
 8004704:	9201      	str	r2, [sp, #4]
 8004706:	1e5a      	subs	r2, r3, #1
 8004708:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800470c:	bf88      	it	hi
 800470e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004712:	4627      	mov	r7, r4
 8004714:	bf82      	ittt	hi
 8004716:	eb03 0905 	addhi.w	r9, r3, r5
 800471a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800471e:	60a3      	strhi	r3, [r4, #8]
 8004720:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004724:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004728:	bf98      	it	ls
 800472a:	f04f 0900 	movls.w	r9, #0
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	463d      	mov	r5, r7
 8004732:	f04f 0b00 	mov.w	fp, #0
 8004736:	6831      	ldr	r1, [r6, #0]
 8004738:	ab03      	add	r3, sp, #12
 800473a:	7809      	ldrb	r1, [r1, #0]
 800473c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004740:	2202      	movs	r2, #2
 8004742:	f7fb fd5d 	bl	8000200 <memchr>
 8004746:	b328      	cbz	r0, 8004794 <_scanf_i+0xb8>
 8004748:	f1bb 0f01 	cmp.w	fp, #1
 800474c:	d159      	bne.n	8004802 <_scanf_i+0x126>
 800474e:	6862      	ldr	r2, [r4, #4]
 8004750:	b92a      	cbnz	r2, 800475e <_scanf_i+0x82>
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	2108      	movs	r1, #8
 8004756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475a:	6061      	str	r1, [r4, #4]
 800475c:	6022      	str	r2, [r4, #0]
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004764:	6022      	str	r2, [r4, #0]
 8004766:	68a2      	ldr	r2, [r4, #8]
 8004768:	1e51      	subs	r1, r2, #1
 800476a:	60a1      	str	r1, [r4, #8]
 800476c:	b192      	cbz	r2, 8004794 <_scanf_i+0xb8>
 800476e:	6832      	ldr	r2, [r6, #0]
 8004770:	1c51      	adds	r1, r2, #1
 8004772:	6031      	str	r1, [r6, #0]
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	f805 2b01 	strb.w	r2, [r5], #1
 800477a:	6872      	ldr	r2, [r6, #4]
 800477c:	3a01      	subs	r2, #1
 800477e:	2a00      	cmp	r2, #0
 8004780:	6072      	str	r2, [r6, #4]
 8004782:	dc07      	bgt.n	8004794 <_scanf_i+0xb8>
 8004784:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004788:	4631      	mov	r1, r6
 800478a:	4650      	mov	r0, sl
 800478c:	4790      	blx	r2
 800478e:	2800      	cmp	r0, #0
 8004790:	f040 8085 	bne.w	800489e <_scanf_i+0x1c2>
 8004794:	f10b 0b01 	add.w	fp, fp, #1
 8004798:	f1bb 0f03 	cmp.w	fp, #3
 800479c:	d1cb      	bne.n	8004736 <_scanf_i+0x5a>
 800479e:	6863      	ldr	r3, [r4, #4]
 80047a0:	b90b      	cbnz	r3, 80047a6 <_scanf_i+0xca>
 80047a2:	230a      	movs	r3, #10
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	6863      	ldr	r3, [r4, #4]
 80047a8:	4945      	ldr	r1, [pc, #276]	@ (80048c0 <_scanf_i+0x1e4>)
 80047aa:	6960      	ldr	r0, [r4, #20]
 80047ac:	1ac9      	subs	r1, r1, r3
 80047ae:	f000 f889 	bl	80048c4 <__sccl>
 80047b2:	f04f 0b00 	mov.w	fp, #0
 80047b6:	68a3      	ldr	r3, [r4, #8]
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d03d      	beq.n	800483a <_scanf_i+0x15e>
 80047be:	6831      	ldr	r1, [r6, #0]
 80047c0:	6960      	ldr	r0, [r4, #20]
 80047c2:	f891 c000 	ldrb.w	ip, [r1]
 80047c6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d035      	beq.n	800483a <_scanf_i+0x15e>
 80047ce:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80047d2:	d124      	bne.n	800481e <_scanf_i+0x142>
 80047d4:	0510      	lsls	r0, r2, #20
 80047d6:	d522      	bpl.n	800481e <_scanf_i+0x142>
 80047d8:	f10b 0b01 	add.w	fp, fp, #1
 80047dc:	f1b9 0f00 	cmp.w	r9, #0
 80047e0:	d003      	beq.n	80047ea <_scanf_i+0x10e>
 80047e2:	3301      	adds	r3, #1
 80047e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80047e8:	60a3      	str	r3, [r4, #8]
 80047ea:	6873      	ldr	r3, [r6, #4]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	6073      	str	r3, [r6, #4]
 80047f2:	dd1b      	ble.n	800482c <_scanf_i+0x150>
 80047f4:	6833      	ldr	r3, [r6, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	6033      	str	r3, [r6, #0]
 80047fa:	68a3      	ldr	r3, [r4, #8]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60a3      	str	r3, [r4, #8]
 8004800:	e7d9      	b.n	80047b6 <_scanf_i+0xda>
 8004802:	f1bb 0f02 	cmp.w	fp, #2
 8004806:	d1ae      	bne.n	8004766 <_scanf_i+0x8a>
 8004808:	6822      	ldr	r2, [r4, #0]
 800480a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800480e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004812:	d1bf      	bne.n	8004794 <_scanf_i+0xb8>
 8004814:	2110      	movs	r1, #16
 8004816:	6061      	str	r1, [r4, #4]
 8004818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800481c:	e7a2      	b.n	8004764 <_scanf_i+0x88>
 800481e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004822:	6022      	str	r2, [r4, #0]
 8004824:	780b      	ldrb	r3, [r1, #0]
 8004826:	f805 3b01 	strb.w	r3, [r5], #1
 800482a:	e7de      	b.n	80047ea <_scanf_i+0x10e>
 800482c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004830:	4631      	mov	r1, r6
 8004832:	4650      	mov	r0, sl
 8004834:	4798      	blx	r3
 8004836:	2800      	cmp	r0, #0
 8004838:	d0df      	beq.n	80047fa <_scanf_i+0x11e>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	05d9      	lsls	r1, r3, #23
 800483e:	d50d      	bpl.n	800485c <_scanf_i+0x180>
 8004840:	42bd      	cmp	r5, r7
 8004842:	d909      	bls.n	8004858 <_scanf_i+0x17c>
 8004844:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004848:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800484c:	4632      	mov	r2, r6
 800484e:	4650      	mov	r0, sl
 8004850:	4798      	blx	r3
 8004852:	f105 39ff 	add.w	r9, r5, #4294967295
 8004856:	464d      	mov	r5, r9
 8004858:	42bd      	cmp	r5, r7
 800485a:	d028      	beq.n	80048ae <_scanf_i+0x1d2>
 800485c:	6822      	ldr	r2, [r4, #0]
 800485e:	f012 0210 	ands.w	r2, r2, #16
 8004862:	d113      	bne.n	800488c <_scanf_i+0x1b0>
 8004864:	702a      	strb	r2, [r5, #0]
 8004866:	6863      	ldr	r3, [r4, #4]
 8004868:	9e01      	ldr	r6, [sp, #4]
 800486a:	4639      	mov	r1, r7
 800486c:	4650      	mov	r0, sl
 800486e:	47b0      	blx	r6
 8004870:	f8d8 3000 	ldr.w	r3, [r8]
 8004874:	6821      	ldr	r1, [r4, #0]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	f8c8 2000 	str.w	r2, [r8]
 800487c:	f011 0f20 	tst.w	r1, #32
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	d00f      	beq.n	80048a4 <_scanf_i+0x1c8>
 8004884:	6018      	str	r0, [r3, #0]
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60e3      	str	r3, [r4, #12]
 800488c:	6923      	ldr	r3, [r4, #16]
 800488e:	1bed      	subs	r5, r5, r7
 8004890:	445d      	add	r5, fp
 8004892:	442b      	add	r3, r5
 8004894:	6123      	str	r3, [r4, #16]
 8004896:	2000      	movs	r0, #0
 8004898:	b007      	add	sp, #28
 800489a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800489e:	f04f 0b00 	mov.w	fp, #0
 80048a2:	e7ca      	b.n	800483a <_scanf_i+0x15e>
 80048a4:	07ca      	lsls	r2, r1, #31
 80048a6:	bf4c      	ite	mi
 80048a8:	8018      	strhmi	r0, [r3, #0]
 80048aa:	6018      	strpl	r0, [r3, #0]
 80048ac:	e7eb      	b.n	8004886 <_scanf_i+0x1aa>
 80048ae:	2001      	movs	r0, #1
 80048b0:	e7f2      	b.n	8004898 <_scanf_i+0x1bc>
 80048b2:	bf00      	nop
 80048b4:	08004d20 	.word	0x08004d20
 80048b8:	08004b6d 	.word	0x08004b6d
 80048bc:	08004c4d 	.word	0x08004c4d
 80048c0:	08004d87 	.word	0x08004d87

080048c4 <__sccl>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	780b      	ldrb	r3, [r1, #0]
 80048c8:	4604      	mov	r4, r0
 80048ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80048cc:	bf0b      	itete	eq
 80048ce:	784b      	ldrbeq	r3, [r1, #1]
 80048d0:	1c4a      	addne	r2, r1, #1
 80048d2:	1c8a      	addeq	r2, r1, #2
 80048d4:	2100      	movne	r1, #0
 80048d6:	bf08      	it	eq
 80048d8:	2101      	moveq	r1, #1
 80048da:	3801      	subs	r0, #1
 80048dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80048e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80048e4:	42a8      	cmp	r0, r5
 80048e6:	d1fb      	bne.n	80048e0 <__sccl+0x1c>
 80048e8:	b90b      	cbnz	r3, 80048ee <__sccl+0x2a>
 80048ea:	1e50      	subs	r0, r2, #1
 80048ec:	bd70      	pop	{r4, r5, r6, pc}
 80048ee:	f081 0101 	eor.w	r1, r1, #1
 80048f2:	54e1      	strb	r1, [r4, r3]
 80048f4:	4610      	mov	r0, r2
 80048f6:	4602      	mov	r2, r0
 80048f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80048fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80048fe:	d005      	beq.n	800490c <__sccl+0x48>
 8004900:	2d5d      	cmp	r5, #93	@ 0x5d
 8004902:	d016      	beq.n	8004932 <__sccl+0x6e>
 8004904:	2d00      	cmp	r5, #0
 8004906:	d0f1      	beq.n	80048ec <__sccl+0x28>
 8004908:	462b      	mov	r3, r5
 800490a:	e7f2      	b.n	80048f2 <__sccl+0x2e>
 800490c:	7846      	ldrb	r6, [r0, #1]
 800490e:	2e5d      	cmp	r6, #93	@ 0x5d
 8004910:	d0fa      	beq.n	8004908 <__sccl+0x44>
 8004912:	42b3      	cmp	r3, r6
 8004914:	dcf8      	bgt.n	8004908 <__sccl+0x44>
 8004916:	3002      	adds	r0, #2
 8004918:	461a      	mov	r2, r3
 800491a:	3201      	adds	r2, #1
 800491c:	4296      	cmp	r6, r2
 800491e:	54a1      	strb	r1, [r4, r2]
 8004920:	dcfb      	bgt.n	800491a <__sccl+0x56>
 8004922:	1af2      	subs	r2, r6, r3
 8004924:	3a01      	subs	r2, #1
 8004926:	1c5d      	adds	r5, r3, #1
 8004928:	42b3      	cmp	r3, r6
 800492a:	bfa8      	it	ge
 800492c:	2200      	movge	r2, #0
 800492e:	18ab      	adds	r3, r5, r2
 8004930:	e7e1      	b.n	80048f6 <__sccl+0x32>
 8004932:	4610      	mov	r0, r2
 8004934:	e7da      	b.n	80048ec <__sccl+0x28>

08004936 <__submore>:
 8004936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493a:	460c      	mov	r4, r1
 800493c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800493e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004942:	4299      	cmp	r1, r3
 8004944:	d11d      	bne.n	8004982 <__submore+0x4c>
 8004946:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800494a:	f7ff f92f 	bl	8003bac <_malloc_r>
 800494e:	b918      	cbnz	r0, 8004958 <__submore+0x22>
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004958:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800495c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800495e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004962:	6360      	str	r0, [r4, #52]	@ 0x34
 8004964:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004968:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800496c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8004970:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004974:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8004978:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800497c:	6020      	str	r0, [r4, #0]
 800497e:	2000      	movs	r0, #0
 8004980:	e7e8      	b.n	8004954 <__submore+0x1e>
 8004982:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004984:	0077      	lsls	r7, r6, #1
 8004986:	463a      	mov	r2, r7
 8004988:	f000 f848 	bl	8004a1c <_realloc_r>
 800498c:	4605      	mov	r5, r0
 800498e:	2800      	cmp	r0, #0
 8004990:	d0de      	beq.n	8004950 <__submore+0x1a>
 8004992:	eb00 0806 	add.w	r8, r0, r6
 8004996:	4601      	mov	r1, r0
 8004998:	4632      	mov	r2, r6
 800499a:	4640      	mov	r0, r8
 800499c:	f000 f830 	bl	8004a00 <memcpy>
 80049a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80049a4:	f8c4 8000 	str.w	r8, [r4]
 80049a8:	e7e9      	b.n	800497e <__submore+0x48>

080049aa <memmove>:
 80049aa:	4288      	cmp	r0, r1
 80049ac:	b510      	push	{r4, lr}
 80049ae:	eb01 0402 	add.w	r4, r1, r2
 80049b2:	d902      	bls.n	80049ba <memmove+0x10>
 80049b4:	4284      	cmp	r4, r0
 80049b6:	4623      	mov	r3, r4
 80049b8:	d807      	bhi.n	80049ca <memmove+0x20>
 80049ba:	1e43      	subs	r3, r0, #1
 80049bc:	42a1      	cmp	r1, r4
 80049be:	d008      	beq.n	80049d2 <memmove+0x28>
 80049c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049c8:	e7f8      	b.n	80049bc <memmove+0x12>
 80049ca:	4402      	add	r2, r0
 80049cc:	4601      	mov	r1, r0
 80049ce:	428a      	cmp	r2, r1
 80049d0:	d100      	bne.n	80049d4 <memmove+0x2a>
 80049d2:	bd10      	pop	{r4, pc}
 80049d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049dc:	e7f7      	b.n	80049ce <memmove+0x24>
	...

080049e0 <_sbrk_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	4d06      	ldr	r5, [pc, #24]	@ (80049fc <_sbrk_r+0x1c>)
 80049e4:	2300      	movs	r3, #0
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f7fc f982 	bl	8000cf4 <_sbrk>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_sbrk_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_sbrk_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	200002ec 	.word	0x200002ec

08004a00 <memcpy>:
 8004a00:	440a      	add	r2, r1
 8004a02:	4291      	cmp	r1, r2
 8004a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a08:	d100      	bne.n	8004a0c <memcpy+0xc>
 8004a0a:	4770      	bx	lr
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a16:	4291      	cmp	r1, r2
 8004a18:	d1f9      	bne.n	8004a0e <memcpy+0xe>
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <_realloc_r>:
 8004a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a20:	4680      	mov	r8, r0
 8004a22:	4615      	mov	r5, r2
 8004a24:	460c      	mov	r4, r1
 8004a26:	b921      	cbnz	r1, 8004a32 <_realloc_r+0x16>
 8004a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	f7ff b8bd 	b.w	8003bac <_malloc_r>
 8004a32:	b92a      	cbnz	r2, 8004a40 <_realloc_r+0x24>
 8004a34:	f7ff f84e 	bl	8003ad4 <_free_r>
 8004a38:	2400      	movs	r4, #0
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a40:	f000 f906 	bl	8004c50 <_malloc_usable_size_r>
 8004a44:	4285      	cmp	r5, r0
 8004a46:	4606      	mov	r6, r0
 8004a48:	d802      	bhi.n	8004a50 <_realloc_r+0x34>
 8004a4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a4e:	d8f4      	bhi.n	8004a3a <_realloc_r+0x1e>
 8004a50:	4629      	mov	r1, r5
 8004a52:	4640      	mov	r0, r8
 8004a54:	f7ff f8aa 	bl	8003bac <_malloc_r>
 8004a58:	4607      	mov	r7, r0
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d0ec      	beq.n	8004a38 <_realloc_r+0x1c>
 8004a5e:	42b5      	cmp	r5, r6
 8004a60:	462a      	mov	r2, r5
 8004a62:	4621      	mov	r1, r4
 8004a64:	bf28      	it	cs
 8004a66:	4632      	movcs	r2, r6
 8004a68:	f7ff ffca 	bl	8004a00 <memcpy>
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	4640      	mov	r0, r8
 8004a70:	f7ff f830 	bl	8003ad4 <_free_r>
 8004a74:	463c      	mov	r4, r7
 8004a76:	e7e0      	b.n	8004a3a <_realloc_r+0x1e>

08004a78 <_strtol_l.constprop.0>:
 8004a78:	2b24      	cmp	r3, #36	@ 0x24
 8004a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a7e:	4686      	mov	lr, r0
 8004a80:	4690      	mov	r8, r2
 8004a82:	d801      	bhi.n	8004a88 <_strtol_l.constprop.0+0x10>
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d106      	bne.n	8004a96 <_strtol_l.constprop.0+0x1e>
 8004a88:	f7fe fff8 	bl	8003a7c <__errno>
 8004a8c:	2316      	movs	r3, #22
 8004a8e:	6003      	str	r3, [r0, #0]
 8004a90:	2000      	movs	r0, #0
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	4834      	ldr	r0, [pc, #208]	@ (8004b68 <_strtol_l.constprop.0+0xf0>)
 8004a98:	460d      	mov	r5, r1
 8004a9a:	462a      	mov	r2, r5
 8004a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004aa0:	5d06      	ldrb	r6, [r0, r4]
 8004aa2:	f016 0608 	ands.w	r6, r6, #8
 8004aa6:	d1f8      	bne.n	8004a9a <_strtol_l.constprop.0+0x22>
 8004aa8:	2c2d      	cmp	r4, #45	@ 0x2d
 8004aaa:	d12d      	bne.n	8004b08 <_strtol_l.constprop.0+0x90>
 8004aac:	782c      	ldrb	r4, [r5, #0]
 8004aae:	2601      	movs	r6, #1
 8004ab0:	1c95      	adds	r5, r2, #2
 8004ab2:	f033 0210 	bics.w	r2, r3, #16
 8004ab6:	d109      	bne.n	8004acc <_strtol_l.constprop.0+0x54>
 8004ab8:	2c30      	cmp	r4, #48	@ 0x30
 8004aba:	d12a      	bne.n	8004b12 <_strtol_l.constprop.0+0x9a>
 8004abc:	782a      	ldrb	r2, [r5, #0]
 8004abe:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004ac2:	2a58      	cmp	r2, #88	@ 0x58
 8004ac4:	d125      	bne.n	8004b12 <_strtol_l.constprop.0+0x9a>
 8004ac6:	786c      	ldrb	r4, [r5, #1]
 8004ac8:	2310      	movs	r3, #16
 8004aca:	3502      	adds	r5, #2
 8004acc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004ad0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	fbbc f9f3 	udiv	r9, ip, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	fb03 ca19 	mls	sl, r3, r9, ip
 8004ae0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004ae4:	2f09      	cmp	r7, #9
 8004ae6:	d81b      	bhi.n	8004b20 <_strtol_l.constprop.0+0xa8>
 8004ae8:	463c      	mov	r4, r7
 8004aea:	42a3      	cmp	r3, r4
 8004aec:	dd27      	ble.n	8004b3e <_strtol_l.constprop.0+0xc6>
 8004aee:	1c57      	adds	r7, r2, #1
 8004af0:	d007      	beq.n	8004b02 <_strtol_l.constprop.0+0x8a>
 8004af2:	4581      	cmp	r9, r0
 8004af4:	d320      	bcc.n	8004b38 <_strtol_l.constprop.0+0xc0>
 8004af6:	d101      	bne.n	8004afc <_strtol_l.constprop.0+0x84>
 8004af8:	45a2      	cmp	sl, r4
 8004afa:	db1d      	blt.n	8004b38 <_strtol_l.constprop.0+0xc0>
 8004afc:	fb00 4003 	mla	r0, r0, r3, r4
 8004b00:	2201      	movs	r2, #1
 8004b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b06:	e7eb      	b.n	8004ae0 <_strtol_l.constprop.0+0x68>
 8004b08:	2c2b      	cmp	r4, #43	@ 0x2b
 8004b0a:	bf04      	itt	eq
 8004b0c:	782c      	ldrbeq	r4, [r5, #0]
 8004b0e:	1c95      	addeq	r5, r2, #2
 8004b10:	e7cf      	b.n	8004ab2 <_strtol_l.constprop.0+0x3a>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1da      	bne.n	8004acc <_strtol_l.constprop.0+0x54>
 8004b16:	2c30      	cmp	r4, #48	@ 0x30
 8004b18:	bf0c      	ite	eq
 8004b1a:	2308      	moveq	r3, #8
 8004b1c:	230a      	movne	r3, #10
 8004b1e:	e7d5      	b.n	8004acc <_strtol_l.constprop.0+0x54>
 8004b20:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004b24:	2f19      	cmp	r7, #25
 8004b26:	d801      	bhi.n	8004b2c <_strtol_l.constprop.0+0xb4>
 8004b28:	3c37      	subs	r4, #55	@ 0x37
 8004b2a:	e7de      	b.n	8004aea <_strtol_l.constprop.0+0x72>
 8004b2c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004b30:	2f19      	cmp	r7, #25
 8004b32:	d804      	bhi.n	8004b3e <_strtol_l.constprop.0+0xc6>
 8004b34:	3c57      	subs	r4, #87	@ 0x57
 8004b36:	e7d8      	b.n	8004aea <_strtol_l.constprop.0+0x72>
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	e7e1      	b.n	8004b02 <_strtol_l.constprop.0+0x8a>
 8004b3e:	1c53      	adds	r3, r2, #1
 8004b40:	d108      	bne.n	8004b54 <_strtol_l.constprop.0+0xdc>
 8004b42:	2322      	movs	r3, #34	@ 0x22
 8004b44:	f8ce 3000 	str.w	r3, [lr]
 8004b48:	4660      	mov	r0, ip
 8004b4a:	f1b8 0f00 	cmp.w	r8, #0
 8004b4e:	d0a0      	beq.n	8004a92 <_strtol_l.constprop.0+0x1a>
 8004b50:	1e69      	subs	r1, r5, #1
 8004b52:	e006      	b.n	8004b62 <_strtol_l.constprop.0+0xea>
 8004b54:	b106      	cbz	r6, 8004b58 <_strtol_l.constprop.0+0xe0>
 8004b56:	4240      	negs	r0, r0
 8004b58:	f1b8 0f00 	cmp.w	r8, #0
 8004b5c:	d099      	beq.n	8004a92 <_strtol_l.constprop.0+0x1a>
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d1f6      	bne.n	8004b50 <_strtol_l.constprop.0+0xd8>
 8004b62:	f8c8 1000 	str.w	r1, [r8]
 8004b66:	e794      	b.n	8004a92 <_strtol_l.constprop.0+0x1a>
 8004b68:	08004d93 	.word	0x08004d93

08004b6c <_strtol_r>:
 8004b6c:	f7ff bf84 	b.w	8004a78 <_strtol_l.constprop.0>

08004b70 <_strtoul_l.constprop.0>:
 8004b70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b74:	4e34      	ldr	r6, [pc, #208]	@ (8004c48 <_strtoul_l.constprop.0+0xd8>)
 8004b76:	4686      	mov	lr, r0
 8004b78:	460d      	mov	r5, r1
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b80:	5d37      	ldrb	r7, [r6, r4]
 8004b82:	f017 0708 	ands.w	r7, r7, #8
 8004b86:	d1f8      	bne.n	8004b7a <_strtoul_l.constprop.0+0xa>
 8004b88:	2c2d      	cmp	r4, #45	@ 0x2d
 8004b8a:	d12f      	bne.n	8004bec <_strtoul_l.constprop.0+0x7c>
 8004b8c:	782c      	ldrb	r4, [r5, #0]
 8004b8e:	2701      	movs	r7, #1
 8004b90:	1c85      	adds	r5, r0, #2
 8004b92:	f033 0010 	bics.w	r0, r3, #16
 8004b96:	d109      	bne.n	8004bac <_strtoul_l.constprop.0+0x3c>
 8004b98:	2c30      	cmp	r4, #48	@ 0x30
 8004b9a:	d12c      	bne.n	8004bf6 <_strtoul_l.constprop.0+0x86>
 8004b9c:	7828      	ldrb	r0, [r5, #0]
 8004b9e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8004ba2:	2858      	cmp	r0, #88	@ 0x58
 8004ba4:	d127      	bne.n	8004bf6 <_strtoul_l.constprop.0+0x86>
 8004ba6:	786c      	ldrb	r4, [r5, #1]
 8004ba8:	2310      	movs	r3, #16
 8004baa:	3502      	adds	r5, #2
 8004bac:	f04f 38ff 	mov.w	r8, #4294967295
 8004bb0:	2600      	movs	r6, #0
 8004bb2:	fbb8 f8f3 	udiv	r8, r8, r3
 8004bb6:	fb03 f908 	mul.w	r9, r3, r8
 8004bba:	ea6f 0909 	mvn.w	r9, r9
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004bc4:	f1bc 0f09 	cmp.w	ip, #9
 8004bc8:	d81c      	bhi.n	8004c04 <_strtoul_l.constprop.0+0x94>
 8004bca:	4664      	mov	r4, ip
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	dd2a      	ble.n	8004c26 <_strtoul_l.constprop.0+0xb6>
 8004bd0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004bd4:	d007      	beq.n	8004be6 <_strtoul_l.constprop.0+0x76>
 8004bd6:	4580      	cmp	r8, r0
 8004bd8:	d322      	bcc.n	8004c20 <_strtoul_l.constprop.0+0xb0>
 8004bda:	d101      	bne.n	8004be0 <_strtoul_l.constprop.0+0x70>
 8004bdc:	45a1      	cmp	r9, r4
 8004bde:	db1f      	blt.n	8004c20 <_strtoul_l.constprop.0+0xb0>
 8004be0:	fb00 4003 	mla	r0, r0, r3, r4
 8004be4:	2601      	movs	r6, #1
 8004be6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bea:	e7e9      	b.n	8004bc0 <_strtoul_l.constprop.0+0x50>
 8004bec:	2c2b      	cmp	r4, #43	@ 0x2b
 8004bee:	bf04      	itt	eq
 8004bf0:	782c      	ldrbeq	r4, [r5, #0]
 8004bf2:	1c85      	addeq	r5, r0, #2
 8004bf4:	e7cd      	b.n	8004b92 <_strtoul_l.constprop.0+0x22>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1d8      	bne.n	8004bac <_strtoul_l.constprop.0+0x3c>
 8004bfa:	2c30      	cmp	r4, #48	@ 0x30
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2308      	moveq	r3, #8
 8004c00:	230a      	movne	r3, #10
 8004c02:	e7d3      	b.n	8004bac <_strtoul_l.constprop.0+0x3c>
 8004c04:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004c08:	f1bc 0f19 	cmp.w	ip, #25
 8004c0c:	d801      	bhi.n	8004c12 <_strtoul_l.constprop.0+0xa2>
 8004c0e:	3c37      	subs	r4, #55	@ 0x37
 8004c10:	e7dc      	b.n	8004bcc <_strtoul_l.constprop.0+0x5c>
 8004c12:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8004c16:	f1bc 0f19 	cmp.w	ip, #25
 8004c1a:	d804      	bhi.n	8004c26 <_strtoul_l.constprop.0+0xb6>
 8004c1c:	3c57      	subs	r4, #87	@ 0x57
 8004c1e:	e7d5      	b.n	8004bcc <_strtoul_l.constprop.0+0x5c>
 8004c20:	f04f 36ff 	mov.w	r6, #4294967295
 8004c24:	e7df      	b.n	8004be6 <_strtoul_l.constprop.0+0x76>
 8004c26:	1c73      	adds	r3, r6, #1
 8004c28:	d106      	bne.n	8004c38 <_strtoul_l.constprop.0+0xc8>
 8004c2a:	2322      	movs	r3, #34	@ 0x22
 8004c2c:	f8ce 3000 	str.w	r3, [lr]
 8004c30:	4630      	mov	r0, r6
 8004c32:	b932      	cbnz	r2, 8004c42 <_strtoul_l.constprop.0+0xd2>
 8004c34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c38:	b107      	cbz	r7, 8004c3c <_strtoul_l.constprop.0+0xcc>
 8004c3a:	4240      	negs	r0, r0
 8004c3c:	2a00      	cmp	r2, #0
 8004c3e:	d0f9      	beq.n	8004c34 <_strtoul_l.constprop.0+0xc4>
 8004c40:	b106      	cbz	r6, 8004c44 <_strtoul_l.constprop.0+0xd4>
 8004c42:	1e69      	subs	r1, r5, #1
 8004c44:	6011      	str	r1, [r2, #0]
 8004c46:	e7f5      	b.n	8004c34 <_strtoul_l.constprop.0+0xc4>
 8004c48:	08004d93 	.word	0x08004d93

08004c4c <_strtoul_r>:
 8004c4c:	f7ff bf90 	b.w	8004b70 <_strtoul_l.constprop.0>

08004c50 <_malloc_usable_size_r>:
 8004c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c54:	1f18      	subs	r0, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfbc      	itt	lt
 8004c5a:	580b      	ldrlt	r3, [r1, r0]
 8004c5c:	18c0      	addlt	r0, r0, r3
 8004c5e:	4770      	bx	lr

08004c60 <_init>:
 8004c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c62:	bf00      	nop
 8004c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c66:	bc08      	pop	{r3}
 8004c68:	469e      	mov	lr, r3
 8004c6a:	4770      	bx	lr

08004c6c <_fini>:
 8004c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6e:	bf00      	nop
 8004c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c72:	bc08      	pop	{r3}
 8004c74:	469e      	mov	lr, r3
 8004c76:	4770      	bx	lr
